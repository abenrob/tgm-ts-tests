{"version":3,"file":"targomo-leaflet.umd.min.js","sources":["../../src/geometry/projection.ts","../../src/geometry/projectedPolygon.ts","../../src/svg/options.ts","../../src/svg/render.ts","../../src/geometry/clip.ts","../../src/util/minMaxSchedule.ts","../../src/overlay/polygonOverlayElement.ts","../../src/leaflet/polygonOverlay.ts","../../src/leaflet/tileLayer.ts","../../src/leaflet/multigraphTileLayer.ts"],"sourcesContent":["const transformEPSG3857 = ((a: number, b: number, c: number, d: number) => {\n  return function(x: number, y: number, scale: number = 1) {\n    x = scale * (a * x + b)\n    y = scale * (c * y + d)\n    return {x, y}\n  }\n}) (0.5 / (Math.PI), 0.5, -(0.5 / (Math.PI)), 0.5)\n\nexport function webMercatorToLeaflet(x: number, y: number, scale: number = 1) {\n  return transformEPSG3857(x / 6378137, y / 6378137, scale)\n}\n","import { MultipolygonData, PolygonData } from './types'\nimport * as geometry from './projection'\n\nexport interface ProjectedBoundsData {\n  southWest: ProjectedPointData\n  northEast: ProjectedPointData\n}\n\n/**\n *\n */\nexport class ProjectedBounds implements ProjectedBoundsData {\n  southWest: ProjectedPoint = new ProjectedPoint(Infinity, Infinity)\n  northEast: ProjectedPoint = new ProjectedPoint(-Infinity, -Infinity)\n\n  constructor(bounds?: {\n    southWest: {x: number, y: number}\n    northEast: {x: number, y: number}\n  }) {\n    if (bounds) {\n      this.southWest = new ProjectedPoint(bounds.southWest.x, bounds.southWest.y)\n      this.northEast = new ProjectedPoint(bounds.northEast.x, bounds.northEast.y)\n    }\n  }\n\n  expandPoint(x: number, y: number) {\n    this.southWest.x = Math.min(this.southWest.x, x)\n    this.northEast.x = Math.max(this.northEast.x, x)\n    this.southWest.y = Math.min(this.southWest.y, y)\n    this.northEast.y = Math.max(this.northEast.y, y)\n  }\n\n  expand(bounds: ProjectedBoundsData) {\n    this.expandPoint(bounds.northEast.x, bounds.northEast.y)\n    this.expandPoint(bounds.southWest.x, bounds.southWest.y)\n  }\n\n  modifyIntersect(bounds: ProjectedBoundsData) {\n    this.southWest.x = Math.max(this.southWest.x, bounds.southWest.x)\n    this.northEast.x = Math.min(this.northEast.x, bounds.northEast.x)\n    this.southWest.y = Math.max(this.southWest.y, bounds.southWest.y)\n    this.northEast.y = Math.min(this.northEast.y, bounds.northEast.y)\n    return this\n  }\n\n  // modifyExpand(bounds: ProjectedBounds) {\n  //   this.southWest.x = Math.min(this.southWest.x, bounds.southWest.x)\n  //   this.northEast.x = Math.max(this.northEast.x, bounds.northEast.x)\n  //   this.southWest.y = Math.min(this.southWest.y, bounds.southWest.y)\n  //   this.northEast.y = Math.max(this.northEast.y, bounds.northEast.y)\n  //   return this\n  // }\n\n  contains(bounds: ProjectedBoundsData) {\n    return (\n      this.northEast.x >= bounds.northEast.x &&\n      this.northEast.y >= bounds.northEast.y &&\n      this.southWest.x <= bounds.southWest.x &&\n      this.southWest.y <= bounds.southWest.y\n    )\n  }\n\n  intersects(bounds: ProjectedBoundsData) {\n    return !(\n      this.northEast.x < bounds.southWest.x ||\n      this.northEast.y < bounds.southWest.y ||\n      this.southWest.x > bounds.northEast.x ||\n      this.southWest.y > bounds.northEast.y\n    )\n  }\n\n  growOutwardsFactor(factor: number = 1) {\n    let diffX = (this.northEast.x - this.southWest.x) * factor\n    let diffY = (this.northEast.y - this.southWest.y) * factor\n\n    this.northEast.x += diffX\n    this.northEast.y += diffY\n    this.southWest.x -= diffX\n    this.southWest.y -= diffY\n\n    return this\n  }\n\n  growOutwardsAmount(amount: number) {\n    this.northEast.x += amount\n    this.northEast.y += amount\n    this.southWest.x -= amount\n    this.southWest.y -= amount\n\n    return this\n  }\n\n  toLineString() {\n    return [\n      // new ProjectedPoint(this.southWest.x, this.southWest.y),\n      // new ProjectedPoint(this.northEast.x, this.southWest.y),\n      // new ProjectedPoint(this.northEast.x, this.northEast.y),\n      // new ProjectedPoint(this.southWest.x, this.northEast.y),\n      new ProjectedPoint(this.southWest.x, this.northEast.y),\n      new ProjectedPoint(this.northEast.x, this.northEast.y),\n      new ProjectedPoint(this.northEast.x, this.southWest.y),\n      new ProjectedPoint(this.southWest.x, this.southWest.y),\n    ]\n  }\n\n  reproject(project: (x: number, y: number) => {x: number, y: number}) {\n    return new ProjectedBounds({\n      northEast: project(this.northEast.x, this.northEast.y),\n      southWest: project(this.southWest.x, this.southWest.y),\n    })\n  }\n\n  width() {\n    return this.northEast.x - this.southWest.x\n  }\n\n\n  height() {\n    return this.southWest.y - this.northEast.y\n  }\n\n  left() {\n    return this.southWest.x\n  }\n\n  top() {\n    return this.northEast.y\n  }\n}\n\nexport interface ProjectedPointData {\n  x: number\n  y: number\n}\n\n/**\n *\n */\nexport class ProjectedPoint implements ProjectedPointData {\n  constructor(public x: number, public y: number) {\n  }\n\n  /**\n   * Checks if the given three points are collinear.\n   */\n  isCollinear(before: ProjectedPoint, after: ProjectedPoint, tolerance: number) {\n    if (before.x == after.x && before.y == after.y) {\n      return false\n    }\n\n    if (before.x == this.x && this.x == after.x) {\n      return true\n    }\n\n    if (before.y == this.y && this.y == after.y) {\n      return true\n    }\n\n    const val = (before.x * (this.y - after.y) + this.x * (after.y - before.y) + after.x * (before.y - this.y))\n    return (val < tolerance  && val > -tolerance && before.x != after.x && before.y != after.y)\n  }\n\n  /**\n   *\n   * @param point\n   */\n  euclideanDistance(point: ProjectedPoint) {\n    return Math.sqrt(Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2))\n  }\n}\n\n/**\n *\n */\nexport class ProjectedLineString {\n  points: ProjectedPoint[]\n  bounds3857: ProjectedBounds = new ProjectedBounds()\n\n  constructor(coordinates: [number, number][]) {\n    this.points = coordinates.map(coordinate => {\n      this.bounds3857.expandPoint(coordinate[0], coordinate[1])\n\n      const pair = geometry.webMercatorToLeaflet(coordinate[0], coordinate[1], 1)\n      return new ProjectedPoint(pair.x, pair.y)\n    })\n  }\n}\n\n/**\n *\n */\nexport class ProjectedPolygon {\n  travelTime: number\n  area: number\n  lineStrings: ProjectedLineString[]\n  bounds3857: ProjectedBounds = new ProjectedBounds()\n\n  constructor(data: PolygonData) {\n    this.travelTime = data.travelTime\n    this.area = data.area\n\n    this.lineStrings = [new ProjectedLineString(data.outerBoundary)]\n    this.bounds3857.expand(this.lineStrings[0].bounds3857)\n\n    if (data.innerBoundary) {\n      data.innerBoundary.forEach(innerBoundary => {\n        const lineString = new ProjectedLineString(innerBoundary)\n        this.lineStrings.push(lineString)\n        this.bounds3857.expand(lineString.bounds3857)\n      })\n    }\n  }\n\n  getOuterBoundary() {\n    return this.lineStrings[0]\n  }\n\n  getInnerBoundary() {\n    return this.lineStrings.slice(1)\n  }\n}\n\n/**\n *\n */\nexport class ProjectedMultiPolygon {\n  polygons: {[travelTime: number]: ProjectedPolygon[]} = {}\n  bounds3857: ProjectedBounds = new ProjectedBounds()\n\n  constructor(data: MultipolygonData[]) {\n    data.forEach(multipolygonData => {\n      multipolygonData.polygons.forEach(polygonData => {\n        const polygon = new ProjectedPolygon(polygonData)\n        this.polygons[polygon.travelTime] = this.polygons[polygon.travelTime] || []\n        this.polygons[polygon.travelTime].push(polygon)\n        this.bounds3857.expand(polygon.bounds3857)\n      })\n    })\n  }\n\n  forEach(callback: (travelTime: number, polygon: ProjectedPolygon[], i?: number) => void) {\n    let keys = Object.keys(this.polygons).map(key => +key).sort((a, b) => b - a)\n    keys.forEach((key, i) => callback(+key, this.polygons[<any>key], i))\n  }\n}\n","const COLORS = ['#006837', '#39B54A', '#8CC63F', '#F7931E', '#F15A24', '#C1272D']\nconst COLORS_MAP: {[index: number]: string} = {}\n\nCOLORS.forEach((color, i) => {\n  COLORS_MAP[(i + 1) * 300] = color\n})\n\nexport interface PolygonRenderColorComplexOption {\n  color?: string\n  opacity?: number\n}\n\nfunction isPolygonRenderColorComplexOption(option: PolygonRenderColorOption): option is PolygonRenderColorComplexOption {\n  return option && (option as any).color != null\n}\n\nexport type PolygonRenderColorOption = PolygonRenderColorComplexOption | string\n\nexport class PolygonRenderOptionsData {\n  inverse: boolean = false\n  // colors: ({[edgeWeight: number]: PolygonRenderColorOption}) | (PolygonRenderColorOption[]) = COLORS\n  colors: {[edgeWeight: number]: PolygonRenderColorOption} = COLORS_MAP\n  opacity: number = 0.5\n  strokeWidth: number = 5\n}\n\nexport class PolygonRenderOptions extends PolygonRenderOptionsData {\n  constructor(data: PolygonRenderOptionsData) {\n    super()\n\n    Object.assign(this, data)\n  }\n\n  getColorOpacity(travelTime: number, index: number): {color: string, opacity: number} {\n    let option: PolygonRenderColorOption = null\n    if (this.colors instanceof Array) {\n      option = this.colors[index]\n    } else {\n      option = this.colors[travelTime]\n    }\n\n    if (isPolygonRenderColorComplexOption(option)) {\n      return {\n        color: option.color || '#ccc',\n        opacity: option.opacity || 1\n      }\n    } else {\n      return {\n        color: option || '#ccc',\n        opacity: 1\n      }\n    }\n  }\n}\n","import * as geometry from '../geometry/projection'\nimport { ProjectedMultiPolygon, ProjectedPolygon, ProjectedPoint, ProjectedBounds } from '../geometry/projectedPolygon';\nimport * as simplify from '../geometry/clip'\n// import * as collinear from '../geometry/collinear'\nimport { PolygonRenderOptions } from './options'\nexport { PolygonRenderOptionsData } from './options'\n\nlet idCounter = 0\n\nfunction renderPath(svgData: string, elementOptions: {opacity: number, color: string, strokeWidth: number}) {\n  let initialOpacity = elementOptions.opacity\n\n  return `\n    <g style='opacity: ${initialOpacity}'>\n      <path style='stroke: ${elementOptions.color};\n            fill: ${elementOptions.color};\n            stroke-opacity: ${elementOptions.opacity};\n            stroke-width: ${elementOptions.strokeWidth};\n            fill-opacity: ${elementOptions.opacity}'\n\n            d='${svgData}'/>\n    </g>\n  `\n}\n\nfunction renderElement(children: any[], width: number, height: number) {\n  return `\n    <svg  height=\"100%\" width=\"100%\" viewbox=\"0 0 ${width} ${height}\"\n          style='opacity: 1; stroke-linejoin:round; stroke-linecap:round; fill-rule: evenodd'\n          xmlns='http://www.w3.org/2000/svg'>\n          ${children.join('\\n')}\n    </svg>`\n}\n\nfunction renderInverseElement(children: any[], width: number, height: number) {\n  let id = 'tgm:inverse:' + idCounter++\n  const svgFrame = `M 0 0 L ${width} 0 L ${width} ${height} L 0 ${height} z`\n  const frame = `<path style='mask: url(#mask_${id})' d='${svgFrame}'/>`\n  const newSvg = `\n    <defs>\n      <mask id='mask_${id}'>\n          <path style='fill-opacity:1; stroke: white; fill:white;' d='${svgFrame}'/>\"\n          ${children.join('\\n')}\n      </mask>\n    </defs>\n  `\n\n  return  `\n    <svg  height=\"100%\" width=\"100%\" viewbox=\"0 0 ${width} ${height}\"\n          style='opacity: 1; stroke-linejoin:round; stroke-linecap:round; fill-rule: evenodd'\n          xmlns='http://www.w3.org/2000/svg'>\n          ${frame}\n          ${newSvg}\n    </svg>`\n}\n\n/**\n *\n * @param viewport\n * @param bounds3857\n * @param zoomFactor\n * @param multipolygons\n */\nexport function render(viewport: ProjectedBounds,\n                       bounds3857: ProjectedBounds,\n                       zoomFactor: number,\n                       multipolygons: ProjectedMultiPolygon,\n                       options: PolygonRenderOptions\n                      ) {\n  const pairMin = geometry.webMercatorToLeaflet(bounds3857.southWest.x, bounds3857.southWest.y, zoomFactor)\n  const pairMax = geometry.webMercatorToLeaflet(bounds3857.northEast.x, bounds3857.northEast.y, zoomFactor)\n\n  if (pairMax.y < pairMin.y) {\n    [pairMax.y, pairMin.y] = [pairMin.y, pairMax.y]\n  }\n\n  const xMinLeaflet = Math.floor(pairMin.x)\n  const yMinLeaflet = Math.floor(pairMin.y)\n  const xMaxLeaflet = Math.ceil(pairMax.x)\n  const yMaxLeaflet = Math.ceil(pairMax.y)\n\n\n  let projectedViewport = new ProjectedBounds(viewport)\n                            .reproject(geometry.webMercatorToLeaflet)\n\n  let projectedViewportLineString = projectedViewport.toLineString()\n\n  function renderLineString(pathData: any[], points: ProjectedPoint[]) {\n    // points = collinear.filterCollinear(points, 1 / (zoomFactor * 100000))\n    points = simplify.clip(points, projectedViewportLineString)\n\n    points.forEach((point, i) => {\n      let suffix = i > 0 ? 'L' : 'M'\n      const x = Math.round((point.x) * zoomFactor) - xMinLeaflet\n      const y = Math.round((point.y) * zoomFactor) - yMinLeaflet\n      const generatedPoint = `${suffix} ${x} ${y}`\n      pathData.push(generatedPoint)\n    })\n\n    if (pathData.length > 0) {\n      pathData.push('z') // svgz\n    }\n\n    return pathData\n  }\n\n  function renderPolygon(polygon: ProjectedPolygon) {\n    let pathData: any = []\n\n    if (viewport.intersects(polygon.bounds3857)) {\n      renderLineString(pathData, polygon.getOuterBoundary().points)\n      polygon.getInnerBoundary().forEach(innerBoundary => {\n        if (viewport.intersects(innerBoundary.bounds3857)) {\n          renderLineString(pathData, innerBoundary.points)\n        }\n      })\n    }\n\n    return pathData\n  }\n\n  const children: any[] = []\n  multipolygons.forEach((travelTime, polygons, i) => {\n    const svgData = polygons.map(item => renderPolygon(item).join(' ')).join(' ')\n    if (svgData.length != 0) {\n      const polygonOption = options.getColorOpacity(travelTime, i)\n      children.push(renderPath(svgData, {\n        ...polygonOption,\n        strokeWidth: options.strokeWidth,\n        color: options.inverse ? 'black' : polygonOption.color\n      }))\n    }\n  })\n\n  let width = Math.ceil(Math.abs(xMaxLeaflet - xMinLeaflet))\n  let height = Math.ceil(Math.abs(yMaxLeaflet - yMinLeaflet))\n\n  let content: string\n  if (options.inverse) {\n    content = renderInverseElement(children, width, height)\n  } else {\n    content = renderElement(children, width, height)\n  }\n\n  return {content, width, height}\n}\n","import { ProjectedPoint } from './projectedPolygon'\n\n/**\n * [clip clipping like sutherland http://rosettacode.org/wiki/Sutherland-Hodgman_polygon_clipping#JavaScript]\n */\nexport function clip(subjectPolygon: ProjectedPoint[], clipPolygon: ProjectedPoint[]) {\n  let cp1: ProjectedPoint, cp2: ProjectedPoint, s: ProjectedPoint, e: ProjectedPoint\n\n  let inside = function(p: ProjectedPoint) {\n    return (cp2.x - cp1.x) * (p.y - cp1.y) > (cp2.y - cp1.y) * (p.x - cp1.x)\n  }\n\n  let intersection = function() {\n      let dc = new ProjectedPoint(cp1.x - cp2.x, cp1.y - cp2.y),\n          dp = new ProjectedPoint(s.x - e.x, s.y - e.y),\n          n1 = cp1.x * cp2.y - cp1.y * cp2.x,\n          n2 = s.x * e.y - s.y * e.x,\n          n3 = 1.0 / (dc.x * dp.y - dc.y * dp.x)\n\n      return new ProjectedPoint((n1 * dp.x - n2 * dc.x) * n3, (n1 * dp.y - n2 * dc.y) * n3)\n  }\n\n  let outputList = subjectPolygon\n  cp1 = clipPolygon[clipPolygon.length - 1]\n\n  for (let j in clipPolygon) {\n      cp2 = clipPolygon[j]\n\n      let inputList = outputList\n      outputList = []\n\n      s = inputList[inputList.length - 1] // last on the input list\n\n      for (let i in inputList) {\n        e = inputList[i]\n\n          if (inside(e)) {\n            if (!inside(s)) {\n              outputList.push(intersection())\n            }\n            outputList.push(e)\n          } else if (inside(s)) {\n            outputList.push(intersection())\n          }\n          s = e\n      }\n      cp1 = cp2\n  }\n\n  return outputList\n}\n","export class MinMaxSchedule {\n  private shortTimeout: any\n  private longTimeout: any\n\n  constructor(private min: number = 200, private max: number = 700) {\n  }\n\n  schedule(callback: () => any) {\n    const action = () => {\n      clearTimeout(this.longTimeout)\n      clearTimeout(this.shortTimeout)\n\n      this.longTimeout = null\n      this.shortTimeout = null\n\n      callback()\n    }\n\n    if (!this.longTimeout) {\n      this.longTimeout = setTimeout(action, this.max)\n    }\n\n    clearTimeout(this.shortTimeout)\n    this.shortTimeout = setTimeout(action, this.min)\n  }\n\n  scheduleMaximum(callback: () => any) {\n    const action = () => {\n      clearTimeout(this.longTimeout)\n\n      this.longTimeout = null\n\n      callback()\n    }\n\n    if (!this.longTimeout) {\n      this.longTimeout = setTimeout(action, this.max)\n    }\n\n    clearTimeout(this.shortTimeout)\n  }\n}\n","import * as svg from '../svg/render'\nimport {geometry, BoundingBox} from '@targomo/core'\nimport { MultipolygonData } from '../geometry/types'\nimport { ProjectedMultiPolygon, ProjectedBounds, ProjectedBoundsData } from '../geometry/projectedPolygon'\nimport { MinMaxSchedule } from '../util/minMaxSchedule'\nimport { PolygonRenderOptions } from '../svg/options';\n\n\nexport interface PolygonOverlayElementPlugin {\n  getZoom(): number\n  getViewPort(): ProjectedBoundsData\n  getElementPixels(bounds: BoundingBox): ProjectedBoundsData\n}\n\n/**\n *\n */\nexport class PolygonOverlayElement {\n  private divElement: HTMLDivElement\n  bounds: BoundingBox\n  private model: ProjectedMultiPolygon\n  private renderTimeout: MinMaxSchedule = new MinMaxSchedule(300, 3000)\n\n  private currentPixelBounds: ProjectedBounds\n\n  /**\n   *\n   * @param map\n   */\n  constructor(private plugin: PolygonOverlayElementPlugin,\n              private options: svg.PolygonRenderOptionsData) {\n  }\n\n  getElement() {\n    return this.divElement\n  }\n\n  /**\n   *\n   */\n  draw(immediately: boolean = false) {\n    if (immediately) {\n      this.resize()\n      this.render()\n      this.divElement.style.transform = null\n    } else {\n      if (this.divElement && this.bounds) {\n        const bounds = new ProjectedBounds(this.plugin.getElementPixels(this.bounds))\n\n        const div = this.divElement\n        const dx = Math.round(bounds.left() - this.currentPixelBounds.left())\n        const dy = Math.round(bounds.top() - this.currentPixelBounds.top())\n\n        const scaleX = bounds.width() / this.currentPixelBounds.width()\n        const scaleY = bounds.height() / this.currentPixelBounds.height()\n\n        if (scaleY !== 1 || scaleX !== 1) {\n          div.style.transform = `translate3d(${dx}px, ${dy}px, 0) scale3d(${scaleX}, ${scaleY}, 1)`\n        } else if (dx !== 0 || dy !== 0) {\n          div.style.transform = `translate3d(${dx}px, ${dy}px, 0)`\n        }\n      }\n\n      this.renderTimeout.scheduleMaximum(() => {\n        this.render()\n        this.divElement.style.transform = null\n      })\n    }\n  }\n\n  private resize() {\n    if (!this.divElement || !this.bounds) {\n      return\n    }\n\n    const bounds = this.currentPixelBounds = new ProjectedBounds(this.plugin.getElementPixels(this.bounds))\n\n    const div = this.divElement\n\n    div.style.left = bounds.left() + 'px'\n    div.style.top = bounds.top() + 'px'\n    div.style.width = bounds.width() + 'px'\n    div.style.height = bounds.height() + 'px'\n    div.style.transform = null\n  }\n\n  /**\n   *\n   */\n  initElement() {\n    const div = document.createElement('div')\n    div.style.borderStyle = 'none'\n    div.style.borderWidth = '0px'\n    div.style.position = 'absolute'\n    div.style.opacity = ('' + this.options.opacity) || '0.5'\n\n    ; (<any>div).style['backface-visibility'] = 'hidden'\n    ; (<any>div).style['perspective'] = 1000\n    ; (<any>div).style['transform-origin'] = '0 0 0'\n    ; (<any>div).style['will-change'] = 'transform'\n\n    this.divElement = div\n\n    return this.divElement\n  }\n\n  /**\n   *\n   */\n  onRemove() {\n    this.divElement.parentNode.removeChild(this.divElement)\n    this.divElement = null\n  }\n\n  /**\n   *\n   * @param multipolygon\n   */\n  setData(multipolygon: MultipolygonData[]) {\n    if (multipolygon) {\n      this.model = new ProjectedMultiPolygon(multipolygon)\n    } else {\n      this.model = null\n    }\n    this.render()\n  }\n\n  setInverse(inverse: boolean) {\n    this.options.inverse = inverse\n    this.render()\n  }\n\n  setColors(colors: {[edgeWeight: number]: string}) {\n    this.options.colors = colors\n    this.render()\n  }\n\n  setOpacity(opacity: number) {\n    this.options.opacity = opacity\n\n    if (this.divElement) {\n      this.divElement.style.opacity = '' + this.options.opacity || '0.5'\n    }\n  }\n\n  setStrokeWidth(strokeWidth: number) {\n    this.options.strokeWidth = strokeWidth\n    this.render()\n  }\n\n  private boundsCalculation(growFactor: number) {\n    const projectedMultiPolygon = this.model\n    const inverse = this.options.inverse\n\n    const viewPort = new ProjectedBounds(this.plugin.getViewPort()) // .growOutwardsAmount(this.options && this.options.strokeWidth || 0)\n    const bounds = new ProjectedBounds(viewPort)\n    let newBounds = new ProjectedBounds(bounds).growOutwardsFactor(growFactor).modifyIntersect(projectedMultiPolygon.bounds3857)\n\n    if (inverse) {\n      newBounds.expand(viewPort)\n      newBounds.growOutwardsFactor(growFactor)\n    }\n\n    bounds.growOutwardsFactor(growFactor)\n\n    // pixel to\n    const southWest = geometry.webMercatorToLatLng(viewPort.southWest, undefined)\n    const northEast = geometry.webMercatorToLatLng(viewPort.northEast, undefined)\n    const newPixelBounds = this.plugin.getElementPixels({southWest, northEast})\n    const ratio = Math.abs((viewPort.northEast.x - viewPort.southWest.x) / newPixelBounds.northEast.x - newPixelBounds.southWest.x)\n    newBounds.growOutwardsAmount(this.options && (ratio * this.options.strokeWidth) || 0)\n    //\n\n    return {bounds, newBounds}\n  }\n\n  private render(resize = true) {\n    if (!this.divElement) {\n      return\n    }\n\n    if (!this.model) {\n      this.divElement.innerHTML = ''\n      return\n    }\n\n    const zoom = this.plugin.getZoom()\n    let zoomFactor = Math.pow(2, zoom) * 256\n    zoomFactor = Math.min(10000000, zoomFactor)\n\n    const growFactor = 0.1\n    const {bounds, newBounds} = this.boundsCalculation(growFactor)\n\n    const {content} = svg.render(bounds, newBounds, zoomFactor, this.model, new PolygonRenderOptions(this.options))\n\n    this.divElement.innerHTML = content\n\n    const southWest = geometry.webMercatorToLatLng(newBounds.southWest, undefined)\n    const northEast = geometry.webMercatorToLatLng(newBounds.northEast, undefined)\n\n    this.bounds = {southWest, northEast}\n\n    if (resize) {\n      this.resize()\n    }\n  }\n}\n","import * as L from 'leaflet'\nimport { ProjectedBounds, ProjectedBoundsData } from '../geometry/projectedPolygon'\nimport {PolygonOverlayElement} from '../overlay/polygonOverlayElement'\nimport { BoundingBox, geometry } from '@targomo/core'\nimport { MultipolygonData } from '../geometry/types'\nimport * as svg from '../svg/render'\nimport { PolygonRenderColorOption } from '../svg/options'\n\nexport class LeafletPolygonOverlayOptions extends svg.PolygonRenderOptionsData {\n}\n\n/**\n *\n */\nexport class TgmLeafletPolygonOverlay extends L.Layer {\n  private element: PolygonOverlayElement\n  private readyResolve: () => void\n  private readyPromise = new Promise(resolve => this.readyResolve = resolve)\n  private options: LeafletPolygonOverlayOptions\n\n  /**\n   *\n   * @param options\n   */\n  constructor(options?: Partial<LeafletPolygonOverlayOptions>) {\n    super()\n\n    this.options = Object.assign(new LeafletPolygonOverlayOptions(), options || {})\n  }\n\n  /**\n   *\n   * @param multipolygon\n   */\n  async setData(multipolygon: MultipolygonData[]) {\n    await this.readyPromise\n    if (this.element) {\n      this.element.setData(multipolygon)\n    }\n  }\n\n  /**\n   *\n   */\n  draw() {\n    if (this.element) {\n      L.DomUtil.setTransform(this.element.getElement(), new L.Point(0, 0), null)\n      this.element.draw(true)\n    }\n  }\n\n  /**\n   *\n   * @param map\n   */\n  onAdd(map: L.Map) {\n    this.element = new PolygonOverlayElement({\n      getZoom() {\n        return map.getZoom()\n      },\n\n      getViewPort(): ProjectedBoundsData {\n        const bounds = map.getBounds()\n        return new ProjectedBounds({\n          northEast: geometry.latLngToWebMercator({\n            lng: bounds.getNorthEast().lng,\n            lat: bounds.getNorthEast().lat,\n          }),\n          southWest: geometry.latLngToWebMercator({\n            lng: bounds.getSouthWest().lng,\n            lat: bounds.getSouthWest().lat,\n          })\n        })\n      },\n\n      getElementPixels(bounds: BoundingBox): ProjectedBoundsData {\n        const northEast = map.latLngToLayerPoint(bounds.northEast)\n        const southWest = map.latLngToLayerPoint(bounds.southWest)\n\n        return {northEast, southWest}\n      }\n    }, this.options)\n\n    const div = this.element.initElement()\n    div.style.transformOrigin = 'center'\n    L.DomUtil.addClass(div, 'leaflet-zoom-' + (true ? 'animated' : 'hide'))\n\n    map.getPanes().overlayPane.appendChild(div)\n\n    // const draw = () => this.draw()\n\n    map.on('moveend', this.draw, this)\n    map.on('resize',  this.draw, this)\n    map.on('zoomend',  this.draw, this)\n\n    const animated = this._map.options.zoomAnimation && L.Browser.any3d\n    if (animated) {\n      map.on('zoomanim', (e: L.ZoomAnimEvent) => {\n        if (this.element.bounds) {\n\n          const scale = map.getZoomScale(e.zoom, map.getZoom())\n\n          const pos1 = (map as any)._latLngToNewLayerPoint(this.element.bounds.southWest, e.zoom, e.center).round()\n          const pos2 = (map as any)._latLngToNewLayerPoint(this.element.bounds.northEast, e.zoom, e.center).round()\n          const cur1 = (map as any)._latLngToNewLayerPoint(this.element.bounds.southWest, map.getZoom(), map.getCenter()).round()\n          const cur2  = (map as any)._latLngToNewLayerPoint(this.element.bounds.northEast, map.getZoom(), map.getCenter()).round()\n\n          const pos = {x: (pos1.x + pos2.x) / 2, y: (pos1.y + pos2.y) / 2}\n          const cur = {x: (cur1.x + cur2.x) / 2, y: (cur1.y + cur2.y) / 2}\n\n          L.DomUtil.setTransform(div, new L.Point(pos.x - cur.x, pos.y - cur.y), scale)\n        }\n      })\n    }\n\n    this.readyResolve()\n    this.draw()\n\n    return this\n  }\n\n  onRemove(): this {\n    if (this.element) {\n      this.element.onRemove()\n      this.element = null\n    }\n    return this\n  }\n\n  /**\n   *\n   * @param inverse\n   */\n  setInverse(inverse: boolean) {\n    this.options.inverse = inverse\n    this.draw()\n  }\n\n  /**\n   *\n   * @param colors\n   */\n  setColors(colors: {[edgeWeight: number]: PolygonRenderColorOption}) {\n    this.options.colors = colors\n    this.draw()\n  }\n\n  /**\n   *\n   * @param opacity\n   */\n  setOpacity(opacity: number) {\n    this.options.opacity = opacity\n\n    if (this.element) {\n      const div = this.element.getElement()\n      div.style.opacity = this.options.opacity != null ? ('' + this.options.opacity) : '0.5'\n    }\n  }\n\n  /**\n   *\n   * @param strokeWidth\n   */\n  setStrokeWidth(strokeWidth: number) {\n    this.options.strokeWidth = strokeWidth\n    this.draw()\n  }\n}\n\n","import * as L from 'leaflet';\nimport { TargomoClient } from '@targomo/core';\n\nexport class TgmLeafletTileLayer extends L.TileLayer {\n    constructor(tgmClient: TargomoClient, basemapName: string, options: L.TileLayerOptions) {\n\n        if (!basemapName && !tgmClient.basemaps.basemapsLookup[basemapName]) {\n            throw new Error('valid style name required to access Targomo basemap');\n        }\n\n        const tileUrl = 'https://maps.targomo.com/styles/' +\n            tgmClient.basemaps.basemapsLookup[basemapName] +\n            '/rendered/{z}/{x}/{y}.png?key=' +\n            tgmClient.serviceKey;\n\n        super(tileUrl , options);\n    }\n\n    static getTileLayerList(tgmClient: TargomoClient): {[basemapName: string]: TgmLeafletTileLayer} {\n        const tileLayerList: {[basemapName: string]: TgmLeafletTileLayer} = {}\n        tgmClient.basemaps.basemapNames.forEach(basemapName => {\n            tileLayerList[basemapName] = new TgmLeafletTileLayer(tgmClient, basemapName, {});\n        });\n        return tileLayerList;\n    }\n}\n","import * as L from 'leaflet';\nimport 'leaflet.vectorgrid/dist/Leaflet.VectorGrid.bundled.js';\n\nimport { TargomoClient, LatLngIdTravelMode, MultigraphRequestOptions } from '@targomo/core';\nexport class TgmLeafletMultigraphTileLayer {\n    tgmClient: TargomoClient;\n    layer: any;\n    map: L.Map;\n    multigraphOptions: MultigraphRequestOptions;\n    sources: LatLngIdTravelMode[];\n    vectorTileoptions: {vectorTileLayerStyles: any};\n    constructor(\n        tgmClient: TargomoClient,\n        sources: LatLngIdTravelMode[],\n        multigraphOptions: MultigraphRequestOptions,\n        vectorTileoptions: {vectorTileLayerStyles: any}) {\n\n        this.tgmClient = tgmClient;\n\n        this.update(multigraphOptions, vectorTileoptions, sources);\n    }\n\n    async addTo(map: L.Map) {\n        if (!this.layer) {\n            await this.createLayer();\n        }\n        this.map = map;\n        this.layer.addTo(map);\n    }\n\n    update(\n        multigraphOptions?: MultigraphRequestOptions,\n        vectorTileoptions?: {vectorTileLayerStyles: any},\n        sources?: LatLngIdTravelMode[]): Promise<any>  {\n        if (multigraphOptions) {\n            this.multigraphOptions = multigraphOptions;\n        }\n        if (vectorTileoptions) {\n            this.vectorTileoptions = vectorTileoptions;\n        }\n        if (sources) {\n            this.sources = sources;\n        }\n\n        return this.createLayer();\n    }\n\n    async createLayer() {\n        if (this.map && this.layer) {\n            this.map.removeLayer(this.layer);\n        }\n        const url = await this.tgmClient.multigraph.getTiledMultigraphUrl(this.sources, this.multigraphOptions, 'mvt');\n        this.layer = (L as any).vectorGrid.protobuf(url, this.vectorTileoptions);\n        if (this.map && this.layer) {\n            this.layer.addTo(this.map);\n        }\n        return;\n    }\n}\n"],"names":["a","c","transformEPSG3857","Math","x","y","scale","bounds","this","ProjectedPoint","Infinity","southWest","northEast","ProjectedBounds","min","max","expandPoint","factor","diffX","diffY","amount","project","before","after","tolerance","val","point","sqrt","pow","coordinates","points","map","coordinate","_this","bounds3857","pair","geometry.webMercatorToLeaflet","data","travelTime","area","lineStrings","ProjectedLineString","outerBoundary","expand","innerBoundary","forEach","lineString","push","ProjectedPolygon","slice","multipolygonData","polygons","polygonData","polygon","ProjectedMultiPolygon","callback","Object","keys","key","sort","b","i","COLORS_MAP","color","_super","assign","tslib_1.__extends","PolygonRenderOptions","index","option","colors","Array","opacity","PolygonRenderOptionsData","idCounter","viewport","zoomFactor","multipolygons","options","pairMin","pairMax","_a","xMinLeaflet","floor","yMinLeaflet","xMaxLeaflet","ceil","yMaxLeaflet","projectedViewportLineString","reproject","toLineString","pathData","subjectPolygon","clipPolygon","cp1","cp2","s","e","inside","p","intersection","dc","dp","n1","n2","n3","outputList","j","length","inputList","simplify.clip","generatedPoint","round","children","svgData","elementOptions","item","intersects","renderLineString","getOuterBoundary","getInnerBoundary","join","polygonOption","getColorOpacity","strokeWidth","inverse","width","height","id","svgFrame","abs","content","MinMaxSchedule","action","clearTimeout","longTimeout","shortTimeout","setTimeout","plugin","PolygonOverlayElement","divElement","immediately","resize","render","style","transform","getElementPixels","div","dx","left","currentPixelBounds","dy","top","scaleX","scaleY","renderTimeout","scheduleMaximum","document","createElement","borderStyle","borderWidth","position","parentNode","removeChild","multipolygon","model","growFactor","projectedMultiPolygon","viewPort","getViewPort","newBounds","growOutwardsFactor","modifyIntersect","geometry","webMercatorToLatLng","undefined","newPixelBounds","ratio","growOutwardsAmount","zoom","getZoom","innerHTML","svg.PolygonRenderOptionsData","Promise","resolve","readyResolve","LeafletPolygonOverlayOptions","TgmLeafletPolygonOverlay","readyPromise","element","setData","L.DomUtil","setTransform","getElement","L.Point","draw","getBounds","latLngToWebMercator","lng","getNorthEast","lat","getSouthWest","latLngToLayerPoint","initElement","transformOrigin","addClass","getPanes","overlayPane","appendChild","on","_map","zoomAnimation","L.Browser","any3d","getZoomScale","pos1","_latLngToNewLayerPoint","center","pos2","cur1","getCenter","cur2","pos","cur","onRemove","L.Layer","tgmClient","basemapName","basemaps","basemapsLookup","Error","tileUrl","serviceKey","TgmLeafletTileLayer","tileLayerList","basemapNames","L.TileLayer","sources","multigraphOptions","vectorTileoptions","update","TgmLeafletMultigraphTileLayer","layer","createLayer","addTo","removeLayer","multigraph","getTiledMultigraphUrl","url","L.vectorGrid","protobuf"],"mappings":"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"}