{"version":3,"file":"targomo-core.umd.js","sources":["../../node_modules/whatwg-fetch/fetch.js","../../src/api/clientConfig.ts","../../src/util/cache.ts","../../src/util/requestUtil.ts","../../src/api/benchmarks.ts","../../src/util/urlUtil.ts","../../src/api/geocode.ts","../../src/api/geocodePhoton.ts","../../src/types/requestOptions.ts","../../src/api/payload/travelRequestPayload.ts","../../src/api/payload/multigraphRequestPayload.ts","../../src/api/multigraph.ts","../../src/api/payload/optimizationRequestPayload.ts","../../src/types/responses/optimizationResult.ts","../../src/api/optimizations.ts","../../src/api/payload/poiRequestPayload.ts","../../src/api/pointsOfInterest.ts","../../src/types/types.ts","../../src/types/options/multigraphRequestOptions.ts","../../src/geometry/projection.ts","../../src/geometry/geometry.ts","../../src/geometry/index.ts","../../src/types/responses/routeSegment.ts","../../src/types/responses/route.ts","../../src/types/responses/statisticsResult.ts","../../src/types/responses/multigraphInfo.ts","../../src/types/responses/FleetResult.ts","../../src/types/responses/statisticsGeometryResult.ts","../../src/types/index.ts","../../src/api/payload/polygonRequestPayload.ts","../../src/types/projectedPolygon.ts","../../src/api/polygons.ts","../../src/api/payload/timeRequestPayload.ts","../../src/api/reachability.ts","../../src/api/payload/routeRequestPayload.ts","../../src/api/routes.ts","../../src/api/similarity.ts","../../src/api/payload/statisticsRequestPayload.ts","../../src/api/payload/statisticsGeometryRequestPayload.ts","../../src/api/statistics.ts","../../src/api/payload/statefulMultigraphRequestPayload.ts","../../src/api/statefulMultigraph.ts","../../src/api/fleets.ts","../../src/api/basemaps.ts","../../src/api/targomoClient.ts","../../src/api/index.ts","../../src/index.ts"],"sourcesContent":["(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1])\n      }, this)\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = String(input)\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ')\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = options.status === undefined ? 200 : options.status\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n","// TODO: or rename to ClientDefaults maybe to make it more clear\n// TODO: add more defaults here ...ex same stuff as in r360-js\n\n\nexport interface ClientOptions {\n  serverUrl?: string\n  statisticsUrl?: string\n  tilesUrl?: string\n  poiUrl?: string\n  mapTilesUrl?: string\n  photonGeocoderUrl?: string\n  overpassUrl?: string\n  fleetsUrl?: string\n  requestTimeout?: number\n  version?: number\n  routeTypes?: {routeType: string | number, color: string, haloColor: string}[]\n  debug?: boolean\n}\n\nexport class ClientConfig implements ClientOptions {\n\n  serverUrl: string = 'https://api.targomo.com/'\n  statisticsUrl: string = 'https://api.targomo.com/statistics/'\n  tilesUrl: string = 'https://api.targomo.com/vector-statistics/'\n  poiUrl: string = 'https://api.targomo.com/pointofinterest/'\n  mapTilesUrl: string = 'https://maps.targomo.com/'\n  photonGeocoderUrl: string = 'https://api.targomo.com/geocode/'\n  overpassUrl: string = 'https://api.targomo.com/overpass/'\n  fleetsUrl: string = 'https://api.targomo.com/fleetplanner/'\n  basemapsUrl: string = 'https://maps.targomo.com/styles/'\n  requestTimeout: 20000\n  version: number = 1\n  debug: boolean = false\n\n  // routeTypes  = [\n  //   // non transit\n  //   { routeType : 'WALK'     , color : 'red',       haloColor : 'white'},\n  //   { routeType : 'BIKE'     , color : '#558D54',   haloColor : 'white'},\n  //   { routeType : 'CAR'      , color : '#558D54',   haloColor : 'white'},\n  //   { routeType : 'TRANSFER' , color : '#C1272D',   haloColor : 'white'},\n\n  //   // berlin\n  //   { routeType : 102        , color : '#006837',   haloColor : 'white' },\n  //   { routeType : 400        , color : '#156ab8',   haloColor : 'white' },\n  //   { routeType : 900        , color : 'red',       haloColor : 'white' },\n  //   { routeType : 700        , color : '#A3007C',   haloColor : 'white' },\n  //   { routeType : 1000       , color : 'blue',      haloColor : 'white' },\n  //   { routeType : 109        , color : '#006F35',   haloColor : 'white' },\n  //   { routeType : 100        , color : 'red',       haloColor : 'white' },\n\n  //   // new york\n  //   { routeType : 1          , color : 'red',       haloColor : 'red'},\n  //   { routeType : 2          , color : 'blue',      haloColor : 'blue'},\n  //   { routeType : 3          , color : 'yellow',    haloColor : 'yellow'},\n  //   { routeType : 0          , color : 'green',     haloColor : 'green'},\n  //   { routeType : 4          , color : 'orange',    haloColor : 'orange'},\n  //   { routeType : 5          , color : 'red',       haloColor : 'red'},\n  //   { routeType : 6          , color : 'blue',      haloColor : 'blue'},\n  //   { routeType : 7          , color : 'yellow',    haloColor : 'yellow' }\n  // ]\n\n  constructor(options: ClientOptions) {\n    Object.assign(this, options)\n  }\n\n}\n","class SimpleLRUEntry<T> {\n  constructor(public value: Promise<T>, public key: string, public previous: SimpleLRUEntry<T>, public next: SimpleLRUEntry<T>) {}\n}\n\nexport interface Cache<T> {\n  get(key: string, factory?: () => Promise<T>): Promise<T>\n}\n\n/**\n * Extremely simple LRU (to avoid includinng another library)...However when more functionality is needed then an existing library is better\n */\nexport class SimpleLRU<T> implements Cache<T> {\n  private map: {[index: string]: SimpleLRUEntry<T>} = {}\n  private size: number = 0\n  private newest: SimpleLRUEntry<T>\n  private oldest: SimpleLRUEntry<T>\n\n  constructor(private capacity: number = 0) {\n  }\n\n  /**\n   * If a value for a given key is contained in the cache then return that value\n   * otherwise create/store and return a new value, by calling the given `factory` function\n   *\n   * @param key\n   * @param factory\n   */\n  async get(key: string, factory?: () => Promise<T>): Promise<T> {\n    const found = this.map[key]\n    if (found !== undefined) {\n      if (this.oldest == found && found.next) {\n        this.oldest = found.next\n      }\n\n      if (found.next) {\n        found.next.previous = found.previous\n      }\n\n      if (found.previous) {\n        found.previous.next = found.next\n      }\n\n      found.previous = this.newest\n      found.next = null\n      this.newest = found\n\n      try {\n        return await found.value\n      } catch (e) {\n        this.map[key] = undefined\n        return this.get(key, factory)\n      }\n    } else if (factory) {\n      const promise = factory()\n      const entry = this.map[key] = new SimpleLRUEntry<T>(promise, key, this.newest, null)\n      const value = await promise\n\n      if (this.newest) {\n        this.newest.next = entry\n      }\n\n      this.newest = entry\n\n      if (this.capacity) {\n        if (this.size >= this.capacity) {\n          const current = this.oldest\n\n          if (current) {\n            this.oldest = current.next\n            delete this.map[current.key]\n          }\n\n        } else {\n          this.size++\n        }\n      }\n\n      if (!this.oldest) {\n        this.oldest = this.newest\n      }\n\n      return value\n    } else {\n      return undefined\n    }\n  }\n}\n\n\n/**\n * Even simpler unlimited cache\n */\nexport class SimpleCache<T> implements Cache<T> {\n  private map: {[index: string]: T} = {}\n\n  async get(key: any, factory?: () => Promise<T>): Promise<T> {\n    let keyString: string\n\n    if (typeof key === 'string') {\n      keyString = key\n    } else {\n      keyString = JSON.stringify(key)\n    }\n\n    if (this.map[keyString] != undefined) {\n      return this.map[keyString]\n    } else {\n      const value = await factory()\n      this.map[keyString] = value\n      return value\n    }\n  }\n}\n","import { Cache, SimpleCache } from '../util/cache'\nimport { TargomoClient } from '../api/index';\n\nconst CACHE = new SimpleCache<any>()\n\nfunction logBody(body: any) {\n  if (body instanceof String || typeof body === 'string') {\n    console.log(body)\n  } else {\n    console.log(JSON.stringify(body, null, 2))\n  }\n}\n\nexport class RequestsUtil {\n\n  constructor(private options?: {debug?: boolean, timeout?: number}) {\n  }\n\n  async fetch(url: string, method: string = 'GET', payload?: any, headers: { [index: string]: string } = {}) {\n    let requestMethod = method\n\n    if (method !== 'JSONP') {\n      headers['Accept'] = headers['Accept'] ? headers['Accept'] : 'application/json'\n    } else {\n      requestMethod = 'GET'\n    }\n\n    if (method === 'POST-RAW') {\n      requestMethod = 'POST'\n    }\n\n    if (requestMethod === 'PUT' || requestMethod === 'POST') {\n      headers['Content-Type'] = 'application/json'\n    }\n\n    const requestHeaders = new Headers(headers)\n    const requestOptions: RequestInit = {\n      method: requestMethod,\n      headers: requestHeaders\n    }\n\n    if (method === 'POST-RAW') {\n      requestOptions.body = payload\n    } else if (method !== 'GET' && method !== 'JSONP') {\n      requestOptions.body = JSON.stringify(payload)\n    }\n\n    const response: Response = await fetch(url, requestOptions)\n\n    if ((this.options && this.options.debug) || response.status >= 400) {\n      console.log('[TargomoClient Begin]')\n      console.log('[Request]', requestOptions.method, url)\n      console.log(`  [Headers]`)\n      requestHeaders.forEach((value: string, key: string) => {\n        console.log(`    ${key} = ${value}`)\n      })\n\n      if (requestOptions.body) {\n        console.log(`  [Body]`)\n        console.log(requestOptions.body)\n      }\n\n      console.log('[Response]')\n      console.log('    status = ', response.status)\n      console.log('    statusText = ', response.statusText)\n\n      console.log(`  [Headers]`)\n\n      response.headers.forEach((value: string, key: string) => {\n        console.log(`    ${key} = ${value}`)\n      })\n    }\n\n    if (response.status >= 400) {\n      console.log(`  [Body]`)\n      const responseBody = response.headers.get('content-type') === 'application/json'\n                            ? JSON.stringify(await response.text(), null, 2)\n                            : await response.text()\n\n      logBody(responseBody)\n      console.log('[TargomoClient End]')\n\n      throw new Error(responseBody)\n    } else {\n      let responseValue: any = null\n      if (method === 'JSONP') {\n        const data = await response.text()\n        let start = data.indexOf('(')\n        let end = data.lastIndexOf(')')\n\n        if (start > -1 && end > -1) {\n          responseValue = JSON.parse(data.substring(start + 1, end))\n        } else {\n          responseValue = JSON.parse(data)\n        }\n      } else if (method === 'POST-RAW') {\n        responseValue = await response.text()\n      } else {\n        responseValue = response.json()\n      }\n\n\n      if (this.options && this.options.debug) {\n        console.log('  [Body]')\n        logBody(await responseValue)\n        console.log('[TargomoClient End]')\n      }\n\n      return responseValue\n    }\n  }\n\n  async fetchData(url: string, method: string = 'GET', payload?: any, headers?: { [index: string]: string }) {\n    // No error handling here, it is done in this.fetch()\n    const result: any = await this.fetch(url, method, payload, headers)\n    if (!result.data) {\n      console.warn('No data object was transmitted by ' + url + ' \\nReturning raw response')\n      return result\n    } else {\n      return result.data\n    }\n  }\n\n  /**\n   *\n   * @param cache\n   * @param url\n   * @param method\n   * @param payload\n   */\n  fetchCached<T>(cache: boolean | Cache<T>,\n    url: string,\n    method: string = 'GET',\n    payload?: any,\n    headers?: { [index: string]: string }) {\n    if (cache !== false) {\n      if (cache === true || !cache) {\n        cache = CACHE\n      }\n\n      const key = JSON.stringify({ url, method, payload })\n      return cache.get(key, () => this.fetch(url, method, payload, headers))\n    } else {\n      return this.fetch(url, method, payload, headers)\n    }\n  }\n\n  /**\n   *\n   * @param cache\n   * @param url\n   * @param method\n   * @param payload\n   */\n  fetchCachedData<T>(cache: boolean | Cache<T>,\n    url: string,\n    method: string = 'GET',\n    payload?: any,\n    headers?: { [index: string]: string }) {\n    if (cache !== false) {\n      if (cache === true || !cache) {\n        cache = CACHE\n      }\n\n      const key = JSON.stringify({ url, method, payload })\n      return cache.get(key, () => this.fetchData(url, method, payload, headers))\n    } else {\n      return this.fetchData(url, method, payload, headers)\n    }\n  }\n}\n\nexport function requests(client?: TargomoClient, options?: { requestTimeout?: number }): RequestsUtil {\n  // const requestTimeout = options && options.requestTimeout || client && client.config && client.config.requestTimeout // TODO....problem\n  return new RequestsUtil({debug: client && client.config && client.config.debug}) // {timeout: requestTimeout})\n}\n","import { TargomoClient } from './targomoClient'\nimport { StatisticsGroupId, BenchmarkCriteria, BoundingBox, UrlUtil } from '../index';\nimport { requests} from '../util/requestUtil';\n\n/**\n * @Topic Benchmarks\n */\nexport class BenchmarksClient {\n  constructor(private client: TargomoClient) {\n  }\n\n\n  /**\n   *\n   */\n  async fetch(group: StatisticsGroupId, conditions: BenchmarkCriteria[], bounds: BoundingBox): Promise<any> {\n    // TODO: have a \"Payload\" object\n    const boundsData = {\n      'west': bounds.southWest.lng,\n      'south': bounds.southWest.lat,\n      'east': bounds.northEast.lng,\n      'north': bounds.northEast.lat\n    }\n\n    const data = {\n      bounds: boundsData,\n      benchmarks: conditions.map(item => ({\n        source: item.source,\n        minEnd: item.minEnd,\n        minStart: item.minStart,\n        factor: item.factor,\n      }))\n    }\n\n    const url = new UrlUtil.TargomoUrl(this.client)\n      .host(this.client.config.tilesUrl)\n      .part('benchmarks/scores_cumulative/')\n      .version()\n      .part('/' + encodeURIComponent('' + group))\n      .key()\n      .toString();\n\n    return await requests(this.client).fetch(url, 'POST', data)\n  }\n\n  /**\n   *\n   */\n  async metadata(key: StatisticsGroupId): Promise<any[]> {\n\n    const url = new UrlUtil.TargomoUrl(this.client)\n      .host(this.client.config.tilesUrl)\n      .part('benchmarks/meta/')\n      .version()\n      .part('/' + encodeURIComponent('' + key))\n      .key()\n      .toString();\n\n    return await requests(this.client).fetch(url)\n  }\n}\n\n","import { TargomoClient } from '..';\n\nexport namespace UrlUtil {\n\n  export class TargomoUrl {\n    private url = '';\n    private firstParamPlaced = false;\n\n    constructor(private client?: TargomoClient) { }\n\n\n    host(value: string) {\n      if (this.url.length === 0 && value[value.length - 1] !== '/') {\n        value += '/';\n      }\n      return this.part(value);\n    }\n\n    part(value: string) {\n      this.url += value;\n      return this;\n    }\n\n    version() {\n      if (this.client.config.version !== null && this.client.config.version !== undefined) {\n        this.part('v' + this.client.config.version);\n      } else if (this.url[this.url.length - 1] === '/' ) {\n        this.url = this.url.substr(0, this.url.length - 1);\n      }\n\n      return this;\n    }\n\n    params(value: any) {\n      const keys = Object.keys(value);\n      keys.forEach(key => {\n        if (value[key] instanceof Array) {\n          value[key].forEach((v: any) => {\n            this.param(key, v);\n          });\n        } else {\n          this.param(key, value[key]);\n        }\n      });\n      return this;\n    }\n\n    private param(name: string, value: any) {\n      if (!this.firstParamPlaced) {\n        this.firstParamPlaced = true;\n        this.url += '?' + name + '=' + value;\n      } else {\n        this.url += '&' + name + '=' + value;\n      }\n    }\n\n    key() {\n      return this.params({key: this.client.serviceKey});\n    }\n\n    toString(): string {\n      return this.url;\n    }\n  }\n}\n\n","import { LatLng } from '../index'\nimport { requests} from '../util/requestUtil'\nimport { UrlUtil } from '../util/urlUtil'\n\nexport class GeocodeEsriClient {\n  constructor() {\n  }\n\n  /**\n   *  Geocoding with esri service\n   * @param query\n   * @param center\n   * @param language\n   * @param country\n   * @param magicKey\n   */\n  async geocode(\n    query: string,\n    center?: LatLng,\n    language?: string,\n    country?: string,\n    magicKey?: string\n  ): Promise<{ lat: number, lng: number, description: string }[]> {\n    const params: any = {\n      singleLine: query,\n      f: 'json',\n      countryCode: country,\n      maxLocations: 5,\n    }\n\n    if (center) {\n      params.location = `${center.lng},${center.lat}`\n    }\n\n    if (magicKey) {\n      params.magicKey = magicKey\n    }\n\n    const url = new UrlUtil.TargomoUrl()\n      .part('https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/findAddressCandidates')\n      .params(params)\n      .toString();\n    const jsonResult = await requests().fetch(url)\n\n    const results = jsonResult.candidates.map(function (result: any) {\n      const location = {\n        lat: result.location.y,\n        lng: result.location.x,\n        description: result.address\n      }\n      return location\n    })\n\n    return results\n  }\n\n\n  /**\n   *\n   * @param query\n   * @param center\n   * @param language\n   * @param country\n   * @param suggestionsCount\n   */\n  async suggest(query: string, center?: LatLng, language?: string, country?: string, suggestionsCount: number = 5): Promise<any[]> {\n    const params: any = {\n      // token: '',\n      // forStorage: false,\n      // singleLine: query,\n      text: query,\n      f: 'json',\n      countryCode: country,\n      // maxLocations: 5,\n      maxSuggestions: suggestionsCount\n    }\n\n    if (center) {\n      params.location = `${center.lng},${center.lat}`\n    }\n    const url = new UrlUtil.TargomoUrl()\n      .part('https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/suggest')\n      .params(params)\n      .toString();\n    const response = await requests().fetch(url)\n\n    return response.suggestions\n  }\n\n  /**\n   * Makes a reverse geocode request to the esri geocoder\n   *\n   * @param location\n   * @param language\n   */\n  async reverseGeocode(location: LatLng, language?: string): Promise<any> {\n    const params: any = {\n      // token: '',\n      // forStorage: false,\n      f: 'json',\n    }\n\n    params.location = `${location.lng},${location.lat}`\n\n    const url = new UrlUtil.TargomoUrl()\n      .part('https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/reverseGeocode')\n      .params(params)\n      .toString();\n\n    const response = await requests().fetch(url)\n    if (response && response.address) {\n      const result = {\n        address: response.address.Match_addr,\n        city: response.address.City,\n        countryCode: response.address.CountryCode,\n        location: response.address.Loc_name,\n        region: response.address.Region,\n        subregion: response.address.Subregion,\n        zip: response.address.Postal\n      }\n\n      return result\n    } else {\n      return {}\n    }\n  }\n}\n","import { TargomoClient } from './targomoClient'\nimport { GeoSearchDescription, LatLng, UrlUtil } from '../index';\nimport { requests} from '../util/requestUtil';\n\nexport class GeocodePhotonClient {\n  constructor(private client: TargomoClient) {\n  }\n\n  async geocode(query: string, center?: LatLng, language?: string): Promise<any[]> {\n\n\n    let url = new UrlUtil.TargomoUrl()\n      .host(this.client.config.photonGeocoderUrl)\n      .part('api')\n      .params({\n        q: encodeURIComponent(query),\n        limit: 5\n      })\n      .toString();\n\n    if (center) {\n      url += '&lat=' + center.lat + '&lon=' + center.lng\n    }\n\n    if (language) {\n      url += '&lang=' + encodeURIComponent(language)\n    }\n\n    const response = await requests().fetch(url)\n\n    response.features.forEach(function(feature: any, index: any, array: any) {\n      if (feature.properties.osm_key == 'boundary')  {\n        array.splice(index, 1)\n      }\n    })\n\n    const results = response.features.map((result: any) => {\n      result.value = result.properties.osm_id\n      result.description = this.buildPlaceDescription(result.properties)\n      return result\n    })\n\n    return results\n  }\n\n  private buildPlaceDescription(properties: any): GeoSearchDescription {\n    const join = (texts: string[], middle: string = ' ') => texts.filter(text => !!text).join(middle).trim()\n    const parts = (fields: string[], middle: string) => join(fields.map(key => properties[key]), middle)\n\n    const address1 = parts(['street', 'housenumber'], ' ')\n    const address2 = join([parts(['postcode', 'city'], ' '), properties.country], ', ')\n\n    const result = {\n      title: '',\n      meta1: '',\n      meta2: '',\n      full:  '' // join([parts(['name', 'street', 'housenumber'], ' '), parts(['postcode', 'city'], ', ')])\n    }\n\n    if (properties.name !== undefined) {\n      result.title = properties.name\n      result.meta1 = address1\n      result.meta2 = address2\n    } else {\n      result.title = address1\n      result.meta1 = address2\n    }\n\n    if (properties.name !== address1) {\n      result.full = result.title\n    }\n\n    if (result.meta1 && properties.name !== address1) {\n      result.full += ', ' + result.meta1\n    }\n\n    if (result.meta1 && properties.name === address1) {\n      result.full +=  result.meta1\n    }\n\n    result.full = join([result.full, result.meta2], ', ')\n\n    return result\n  }\n}\n","import {\n  TravelSpeedValues,\n  TravelType,\n  TravelTimeFactors\n} from './types'\n\n\nexport class UseCacheRequestOptions {\n  useClientCache: boolean;\n}\n\nexport class BaseRequestOptions {\n  requestTimeout?: number;\n\n  /**\n   * @General Determines the dimension of the edges' weight, i.e.\n   * @Format time (distance in seconds) or distance (distance in meters)\n   * @Default `'time'`\n   */\n  edgeWeight?: 'time' | 'distance' = 'time';\n\n  /*\n   * @General The maximum distance \"depth\" of the built network.\n   * @Format in seconds (for edgeWeight = time) or meters (for edgeWeight = distance).\n   * @Performance If it is set too low routes between points won't be found.\n   * If it is set high the routing/time service will take longer.\n   * @Default `1800`\n   */\n  maxEdgeWeight?: number;\n\n  /**\n   * @General Whether or not the an elevetion heuristic will be used (e.g. downhill with bike quicker then uphill).\n   * @Default `false`\n   */\n  elevation?: boolean;\n\n  /**\n   * @General Specifies factors with which the travel times of the edges are adjusted.\n   * This may be necessary in certain areas where the travel time calculation is\n   * almost always off by a certain factor, e.g. Paris rush hour.\n   * Transit travel times are not affected by the travelTimeFactors\n   * @Example\n   * ``` js\n   * \"travelTimeFactors\" : { \"all\":0.5, \"motorway\":1.5, .... (other specific edge classes possible) },..\n   * ```\n   * @Min Minimum allowed cumulative travel time factor is `0.5`\n   * @Max Maximum allowed cumulative travel time factor is `100.0`\n   * @Format\n   * Travel time factor of 1.5 means 50% more time is needed\n   * (on top of a specified one, e.g. for the example above 1.5*0.5=0.75 - the final applied travel time factor for 'motorway' edges)\n   * @Nullable All elements are optional\n   */\n  travelTimeFactors?: TravelTimeFactors;\n\n}\n\n\nexport class TravelRequestOptions extends BaseRequestOptions {\n\n  /**\n   * Date and time of a transit request. Should either be a `Date` or a string/number that can be used in the constructor of `Date`.\n   * Using this option overrides `transitFrameDate` and `transitFrameTime`.\n   */\n  transitFrameDateTime?: string | number | Date;\n\n  /**\n   * Time-frame duration in seconds\n   */\n  transitFrameDuration?: number = undefined\n\n  /**\n   * Date of the transit request in the format `YYYYMMDD`\n   */\n  transitFrameDate?: number = 20170801\n\n  /**\n   * Start time of the transit request in seconds from midnight\n   */\n  transitFrameTime?: number = 39600\n\n  /**\n   * Maximum transfer segements in a route\n   */\n  transitMaxTransfers?: number = -1\n\n  /**\n   * Maximum time in seconds to walk to the first station\n   */\n  transitMaxWalkingTimeFromSource?: -1\n\n  /**\n   * Route types to avoid. https://developers.google.com/transit/gtfs/reference/#routestxt\n   */\n  transitAvoidTransitRouteTypes?: number[] = []\n\n  travelType?: TravelType;\n\n  /**\n   * @General Enable the rush hour mode to simulate a more crowded street. Warning this is a paid feature so not\n   * all plans are allowed to enable it.\n   * @Default `false`\n   */\n  rushHour?: boolean;\n\n  walkSpeed?: TravelSpeedValues = {}\n  bikeSpeed?: TravelSpeedValues = {}\n}\n","import { TravelRequestOptions } from './../../types/requestOptions';\nimport { LatLngId, LatLngIdTravelMode } from '../../index'\n\n/**\n * An object the contains a configuration set for making requests to the r360 services backend\n */\nexport class TravelRequestPayload extends TravelRequestOptions {\n  sources: LatLngIdTravelMode[];\n  targets: LatLngId[];\n\n  constructor(options?: TravelRequestOptions) {\n    super();\n    Object.assign(this, options)\n\n    if (options.transitFrameDateTime != null) {\n      let date;\n      if (options.transitFrameDateTime instanceof Date) {\n        date = options.transitFrameDateTime\n      } else {\n        date = new Date(<any>options.transitFrameDateTime)\n      }\n      const transitFrameDate = date ? ((date.getFullYear() * 10000) + (date.getMonth() + 1) * 100 + date.getDate()) : undefined\n      const transitFrameTime = date ? ((date.getHours() * 3600) + (date.getMinutes() * 60)) : undefined\n\n      this.transitFrameDate = transitFrameDate || this.transitFrameDate\n      this.transitFrameTime = transitFrameTime || this.transitFrameTime\n    }\n  }\n\n  protected buildTargetsCfg(targets: LatLngId[]): LatLngId[] {\n    return targets.map(original => {\n      return {\n        lat: original.lat,\n        lng: original.lng,\n        id: original.id,\n      }\n    })\n  }\n\n  protected buildSourcesCfg(sources: LatLngIdTravelMode[]): LatLngIdTravelMode[] {\n    return sources.map(original => {\n      const source = {\n        lat: original.lat,\n        lng: original.lng,\n        id: original.id,\n        tm: original.tm\n      }\n\n      if (!source.tm) {\n        switch (this.travelType) {\n          case 'car':\n            source.tm = {\n              car: this.rushHour ? {\n                rushHour: this.rushHour\n              } : {}\n            }\n            break\n          case 'walk':\n            source.tm = {\n              walk: this.walkSpeed\n            }\n            break\n          case 'bike':\n            source.tm = {\n              bike: this.bikeSpeed\n            }\n            break\n          case 'transit':\n            source.tm = {\n              transit: {\n                frame: {\n                  date: this.transitFrameDate,\n                  time: this.transitFrameTime,\n                  duration: this.transitFrameDuration\n                },\n                maxTransfers: this.transitMaxTransfers\n              }\n            }\n        }\n\n      }\n      return source\n    })\n  }\n}\n","import { TravelRequestPayload } from './travelRequestPayload';\nimport {\n  LatLngIdTravelMode,\n  MultigraphSpecificRequestOptions,\n  LatLngId,\n  MultigraphRequestOptions\n} from '../..';\n\n\nexport class MultigraphRequestPayload extends TravelRequestPayload {\n    multigraph: MultigraphSpecificRequestOptions;\n\n    constructor(sources: LatLngIdTravelMode[], options: MultigraphRequestOptions, targets?: LatLngId[]) {\n        super(options);\n        this.sources = this.buildSourcesCfg(sources);\n        if (targets) {\n            this.targets = this.buildTargetsCfg(targets);\n        }\n\n        this.multigraph = options.multigraph;\n\n    }\n}\n","import { TargomoClient } from '.';\nimport { UrlUtil, LatLngIdTravelMode, LatLngId, requests, MultigraphRequestOptions } from '..';\nimport { MgResult, MgOverviewResult } from '../types/responses/multigraphResult';\nimport { MultigraphRequestPayload } from './payload/multigraphRequestPayload';\n\n/**\n * @Topic Multigraph\n */\nexport class MultigraphClient {\n  constructor(private client: TargomoClient) {\n  }\n\n  /**\n\n   */\n  async fetch(sources: LatLngIdTravelMode[], options: MultigraphRequestOptions, targets?: LatLngId[]): Promise<MgResult> {\n\n    let url = new UrlUtil.TargomoUrl(this.client)\n      .part(this.client.serviceUrl)\n      .version()\n      .part('/multigraph')\n      .key()\n      .toString();\n\n    const cfg = new MultigraphRequestPayload(sources, options, targets);\n    const result = await requests(this.client, options).fetch(url, 'POST', cfg);\n    return result;\n  }\n\n  async fetchOverview(sources: LatLngIdTravelMode[], options: MultigraphRequestOptions, targets?: LatLngId[]): Promise<MgOverviewResult> {\n\n    let url = new UrlUtil.TargomoUrl(this.client)\n      .part(this.client.serviceUrl)\n      .version()\n      .part('/multigraph/overview')\n      .key()\n      .toString();\n\n    const cfg = new MultigraphRequestPayload(sources, options, targets);\n    const result = await requests(this.client, options).fetch(url, 'POST', cfg);\n    return result;\n  }\n\n  async getTiledMultigraphUrl(\n    sources: LatLngIdTravelMode[],\n    options: MultigraphRequestOptions,\n    format: 'geojson' | 'json' | 'mvt',\n    targets?: LatLngId[]): Promise<string> {\n\n    let url = new UrlUtil.TargomoUrl(this.client)\n      .part(this.client.serviceUrl)\n      .version()\n      .part('/objectcache/add')\n      .key()\n      .toString();\n\n    const cfg = new MultigraphRequestPayload(sources, options, targets);\n      // TODO ObjectCache should have its own client\n    const objectCache: any = await requests(this.client, options).fetch(url, 'POST', cfg);\n    return new UrlUtil.TargomoUrl(this.client)\n      .part(this.client.serviceUrl)\n      .version()\n      .part('/multigraph/{z}/{x}/{y}.' + format)\n      .key()\n      .params({\n        cfgUuid: objectCache.uuid\n      })\n      .toString();\n  }\n}\n","import { OptimizationRequestOptions } from '../../types/options/optimizationRequestOptions'\nimport { LatLngId, TravelType } from '../../types/types';\n\nexport class OptimizationRequestPayload {\n  description: string\n  statisticGroupId: number\n  serviceUrl: string\n  serviceKey: string\n  email: string\n  sendMail: boolean\n  callbackUrl: string\n  pointsPerSolution: number\n  maxSolutions: number\n  statisticId: number\n  travelType: TravelType\n  edgeWeight?: 'time' | 'distance'\n  maxEdgeWeight: number\n  sources: {[id: string]: { id: string, x: number, y: number }}[]\n\n  constructor(serviceUrl: string, serviceKey: string, sources: LatLngId[], options: OptimizationRequestOptions) {\n    this.description = options.description || ''\n    this.serviceUrl = serviceUrl\n    this.serviceKey = serviceKey\n    this.email = options.email || 'developers@targomo.com'\n    this.sendMail = false\n    this.callbackUrl = options.callbackUrl || 'https://localhost/' // TODO: was this donig anything?\n    this.pointsPerSolution = options.pointsPerSolution\n    this.maxSolutions = options.maxSolutions || 1\n    this.travelType = options.travelType\n    this.edgeWeight = options.edgeWeight\n    this.maxEdgeWeight = options.maxEdgeWeight\n    this.statisticGroupId = options.statisticGroup\n\n    if (options.statistic instanceof Number || typeof options.statistic === 'number') {\n      this.statisticId = +options.statistic\n    } else {\n      this.statisticId = options.statistic.id\n    }\n    const sourcesObject: {\n      [id: string]: {\n        id: string\n        x: number\n        y: number\n      }\n    } = {};\n    sources.forEach(source => {\n      sourcesObject[source.id] = {\n        id: source.id,\n        x: source.lng,\n        y: source.lat\n      }\n    });\n    this.sources.push(sourcesObject);\n  }\n}\n\n\n","/**\n *\n */\nexport interface OptimizationResultSolution {\n  id: number\n  startTime: number\n  endTime: number\n\n  /**\n   * Maximum statistic value (based on the input statistic) encoutenred in this simulation run\n   */\n  maxValue: number\n\n  /**\n   * How many points were wanted per solution, as specifified when the simulation was started\n   */\n  numberOfDesiredPoints: number\n\n  /**\n   * For each point in the original set show whether it is includes in the simulation subset or not\n   */\n  sources: {[id: string]: boolean}\n}\n\n/**\n * Results of an optimization simulation run\n */\nexport class OptimizationResult {\n  id: number\n  maxPossibleValue: number\n\n  /**\n   * The individual simulation solutions. The maximum number of these is `maxSolutions` supplied when the simulation started,\n   * however their number can also be lower if no more results could be generated\n   */\n  solutions: OptimizationResultSolution[]\n\n  constructor(readonly raw: any) {\n    this.id = raw.id\n    this.maxPossibleValue = raw.maxPossibleValue\n\n    this.solutions = raw.simulationResults.map((simulationResult: any) => {\n      const sources: {[id: string]: boolean} = {}\n\n      simulationResult.sourcePoints.forEach((point: any) => {\n        sources[point.id] = point.optimal\n      })\n\n      return {\n        id: simulationResult.id,\n        startTime: simulationResult.startTime,\n        endTime: simulationResult.endTime,\n        maxValue: simulationResult.maxValue,\n        numberOfDesiredPoints: simulationResult.numberOfDesiredPoints,\n        sources\n      }\n    })\n  }\n}\n","import { TargomoClient } from './targomoClient'\nimport { UrlUtil} from '../util';\nimport { requests} from '../util/requestUtil';\nimport { OptimizationRequestOptions } from '../types/options/optimizationRequestOptions';\nimport { LatLngId } from '../types/types';\nimport { OptimizationRequestPayload } from './payload/optimizationRequestPayload';\nimport { OptimizationResult } from '../types/responses/optimizationResult';\n\n/**\n * @Topic Optimizations\n */\nexport class OptimizationsClient {\n  constructor(private client: TargomoClient) {\n  }\n\n  /**\n   * Initiates a an optimimization simulation. Given a list of locations and simulation parameters it tries to\n   * derive a subset of these locations that are optimal.\n   *\n   * @param sources\n   * @param options\n   */\n  // NOTE: we can't have unit tests for this....\n  async create(sources: LatLngId[], options: OptimizationRequestOptions): Promise<any> {\n    if (!sources.length) {\n      return null\n    }\n\n\n    const url = new UrlUtil.TargomoUrl(this.client)\n      .host(this.client.config.statisticsUrl)\n      .part('simulation/start/')\n      .key()\n      .params({\n        serviceUrl: encodeURIComponent(this.client.serviceUrl)\n      })\n      .toString();\n\n    const cfg = new OptimizationRequestPayload(this.client.serviceUrl, this.client.serviceKey, sources, options)\n\n    const result = await requests(this.client, options).fetch(url, 'POST', cfg)\n    return result && +result.id\n  }\n\n  /**\n   * Checks if the given optimization simulation have completed and have results ready for retrieval\n   *\n   * @param optimizationId\n   */\n  async ready(optimizationId: number | number[]): Promise<{[id: string]: boolean}> {\n    if (!(optimizationId instanceof Array)) {\n      optimizationId = [optimizationId]\n    }\n\n    const url = new UrlUtil.TargomoUrl(this.client)\n      .host(this.client.config.statisticsUrl)\n      .part('simulation/ready/')\n      .key()\n      .params({\n        serviceUrl: encodeURIComponent(this.client.serviceUrl),\n        simulationId: optimizationId\n      })\n      .toString();\n\n    return requests(this.client).fetch(url)\n  }\n\n  /**\n   * Retrieve the results of an optimization simulation\n   *\n   * @param optimizationId\n   */\n  async fetch(optimizationId: number) {\n\n    const url = new UrlUtil.TargomoUrl(this.client)\n      .host(this.client.config.statisticsUrl)\n      .part('simulation/' + optimizationId + '/')\n      .key()\n      .params({\n        serviceUrl: encodeURIComponent(this.client.serviceUrl)\n      })\n      .toString();\n\n    return new OptimizationResult(await requests(this.client).fetch(url))\n  }\n}\n","import { LatLngId, OSMType} from '../../types'\nimport { TargomoClient } from '../targomoClient'\nimport { POIRequestOptions } from '../../types/options/poiRequestOptions'\nimport {TravelRequestPayload} from './travelRequestPayload'\n\nexport class POIRequestPayload extends TravelRequestPayload {\n  osmTypes: OSMType[] = []\n  serviceKey: string\n  serviceUrl: string\n  format: 'json' | 'geojson'\n\n  constructor(client: TargomoClient, source: LatLngId, options: POIRequestOptions) {\n    super(options)\n    this.sources = this.buildSourcesCfg([source])\n    this.osmTypes = options.osmTypes\n    this.format = options.format;\n    this.serviceKey = client.serviceKey\n    this.serviceUrl = client.serviceUrl\n  }\n}\n","import { BoundingBox, LatLngId, LatLngIdProperties, LatLngProperties } from '../types';\nimport { POIRequestOptions } from '../types/options/poiRequestOptions';\nimport { requests } from '../util/requestUtil';\nimport { POIRequestPayload } from './payload/poiRequestPayload';\nimport { TargomoClient } from './targomoClient';\n\n/**\n * An object representing a point (poi/marker) which is returned from overpass queries in this module\n */\n// TODO: move elsewhere...or maybe not used in public library...things in here are too specific\nexport class OSMLatLng implements LatLngProperties {\n  constructor(readonly id: number,\n              readonly lng: number,\n              readonly lat: number,\n              readonly properties: {[index: string]: any}) {\n\n    // TODO: think...this is convenient to how we have things in mapbox widget...but maybe should not be done in a public api\n    if (this.properties) {\n      this.properties['marker-size'] = 1\n    }\n  }\n\n  toString() {\n    return this.properties ? this.properties['name'] : ''\n  }\n\n  copy() {\n    const result = new OSMLatLng(this.id, this.lat, this.lng, {...this.properties})\n\n    for (let key in this) {\n      if (key != 'properties') {\n        (<any>result)[key] = this[key]\n      }\n    }\n\n    return result\n  }\n}\n\nfunction parseOSMLocation(item: any): OSMLatLng {\n  let lat = item.lat\n  let lng = item.lon\n\n  if (lat === undefined && item.center) {\n    lat = item.center.lat\n    lng = item.center.lon\n  }\n\n  return new OSMLatLng(item.id, lng, lat, item.tags)\n}\n\n/**\n *\n */\n// TODO: better method names\n/**\n * @Topic Points of Interest\n */\nexport class PointsOfInterestClient {\n  // Idea is this will be instantiated internally in Targomoclient,. and will receive instance of parent in its constructor\n  constructor(private client: TargomoClient) {\n  }\n\n\n  // TODO move queryRaw and query to common lib\n\n  /**\n   * Query the overpass service with a raw overpass query string (in other words you supply the exact query)\n   *\n   * @param query\n   */\n  async queryRaw(query: string): Promise<OSMLatLng[]> {\n    let result = await requests(this.client).fetch(this.client.config.overpassUrl + '/api/interpreter', 'POST-RAW', query)\n    result = JSON.parse(result)\n    return result.elements.filter((item: any) => !!item.tags).map((item: any) => parseOSMLocation(item))\n  }\n\n  /**\n   * Query the overpass servive for given categories (way[type]=tag and node[way]=tag) within a given bounding box\n   *\n   * @param categories\n   * @param boundingBox\n   */\n  query(categories: {type: string, tag: string}[], boundingBox: BoundingBox[]): Promise<OSMLatLng[]> {\n    function asQueryElement(query: {type: string, tag: string}) {\n    if (query.tag === '*' || query.tag == null) {\n      return `\"${query.type}\"`\n    } else if (query.type && query.tag) {\n      return `\"${query.type}\"=\"${query.tag}\"`\n    } else {\n        throw new Error('invalid query' + JSON.stringify(query))\n      }\n    }\n\n    let params: string[] = []\n    categories.forEach(category => {\n      boundingBox.forEach(box => {\n        params.push(`\n      way[${asQueryElement(category)}]\n        (${box.southWest.lat},${box.southWest.lng},${box.northEast.lat},${box.northEast.lng});\n      node[${asQueryElement(category)}]\n        (${box.southWest.lat},${box.southWest.lng},${box.northEast.lat},${box.northEast.lng});\n        `)\n      })\n    })\n\n    const data = `\n      [out:json];\n      (\n      ${params.join('')}\n      );\n      out center;\n    `\n\n    return this.queryRaw(data)\n  }\n\n  /**\n   * Make an overpass query to a given url (full url including the query parameters)\n   *\n   * The results will be parsed and returned as a list of OSMLatLng objects\n   */\n  // TODO: ...this was used in GH...think what shape of this make best sense for a public library\n  async queryGetCustom(url: string): Promise<OSMLatLng[]> {\n    const result = await requests(this.client).fetch(url)\n    return result.elements.map((item: any) => parseOSMLocation(item))\n  }\n\n  /**\n   * Makes a request to the r360 poi service.\n   * Returns a list of OSMLatLng locations of the categories specified by `osmTypes` that are reachable within the given travel options\n   */\n  async reachable(source: LatLngId, /// LatLng\n                         options: POIRequestOptions): Promise<{[index: string]: LatLngIdProperties}> {\n     // TODO:different return type (todo: check server doesn't return array)\n    const url = `${this.client.config.poiUrl}/reachability`\n    return await requests(this.client, options).fetch(url, 'POST', new POIRequestPayload(this.client, source, options))\n  }\n}\n\n","/**\n * A map coordinate\n */\nexport class LatLng {\n  lat: number\n  lng: number\n  elevation?: number\n}\n\n\n\n/**\n * A map bounding box\n */\nexport class BoundingBox {\n  northEast: LatLng\n  southWest: LatLng\n}\n\n/**\n * Types for the `properties` part of a LatLngProperties object. The defined, non exhaustive, list contains some of the properties that\n * have meaning in various @targomo/client components\n */\nexport interface LatLngPropertiesObject {\n  'marker-type'?: string\n  'marker-size'?: number\n\n  /**\n   * Used by @targomo/client components to decide if a marker representing the location is active\n   */\n  'marker-active'?: boolean\n\n  /**\n   * Used by @targomo/client components to decide if a marker representing the location is draggable\n   */\n  'marker-draggable'?: boolean\n\n  /**\n   * Used by @targomo/client components to decide if a marker representing the location is clickable\n   */\n  'marker-clickable'?: boolean\n\n  [index: string]: any\n}\n\n/**\n * A location on a map that\n */\nexport interface LatLngProperties extends LatLng {\n  properties: LatLngPropertiesObject\n}\n\nexport interface LatLngIdProperties extends LatLngProperties {\n  id: any\n}\n\n\n/**\n *\n */\nexport type ReachableTile = { [tileId: number]: number }\n\n/**\n * The available statistics groups of the statistic service and the vector tiles service\n */\nexport type StatisticsGroupId = number | StatisticsGroups\n\nexport enum StatisticsGroups {\n  GERMANY_ZENSUS_100M_STATISTICS = 9,\n  GERMANY_ZENSUS_200M_STATISTICS = 2,\n  GERMANY_ZENSUS_500M_STATISTICS = 11,\n  GERMANY_ZENSUS_1000M_STATISTICS = 3,\n  GERMANY_ZENSUS_2000M_STATISTICS = 10,\n  NORWAY_STATISTICS = 4,\n  CENSUS_BRANDENBURG_POPULATION = 12,\n  CANADA_BLOCK_STATISTICS = 8,\n  CANADA_AREA_STATISTICS = 5,\n  BERLIN_STATISTICS = 6,\n}\n\n/**\n *\n */\nexport type TravelSpeed = 'slow' | 'medium' | 'fast'\n\n/**\n *\n */\nexport type TravelType = 'walk' | 'car' | 'bike' | 'transit'\n\n\nexport class TravelSpeedValues {\n  speed?: number\n  uphill?: number\n  downhill?: number\n}\n\n/**\n *\n */\nexport type EdgeWeightType = 'time' | 'distance'\n\n/**\n * @hidden\n */\nexport interface GeoSearchDescription {\n  title: string\n  meta1: string\n  meta2: string\n  full: string\n}\n\n/**\n * A specific statistics Item for making a statistics request on a StatisticsGroup\n */\nexport interface StatisticsItem {\n  id: number\n  name: string\n  label?: string,\n  chart?: boolean,\n  type?: 'value' | 'percent' | 'average',\n  meta?: StatisticsItemMeta\n  groupId?: StatisticsGroupId\n  groupMeta?: StatisticsGroupMeta\n}\n\nexport interface StatisticsGroupEnsemble {\n  id: number\n  name: string\n  groups: {\n    id: number,\n    hierarchy: number,\n    minZoomRecommendation: number\n  }[]\n}\n\n/**\n *\n */\nexport interface LabelStatisticsItem extends StatisticsItem {\n  label: string\n}\n\n/**\n *\n */\nexport interface ExtendedStatisticsItem extends LabelStatisticsItem {\n  /**\n   * Can this statistic be displayed as a chart\n   */\n  chart: boolean\n\n  /**\n   * What kind of value does this statistic represent\n   */\n  type: 'value' | 'percent' | 'average'\n}\n\n/**\n * A number of travelTime -> value returned by a statistics call\n */\nexport interface RawStatisticsValues {\n  [time: number]: number\n}\n\n/**\n *A result object for a specific statistic\n */\nexport class StatisticValues {\n  readonly total: number\n\n  constructor(readonly values: RawStatisticsValues) {\n    this.total = 0\n    for (const key in this.values) {\n      this.total += this.values[key]\n    }\n  }\n\n  // total: number\n  // percent: number\n  // average: number\n}\n\nexport interface MatrixOptimizationOptions {\n  pointsPerSolution: number,\n  maxSolutions: number,\n  statistic: StatisticsItem,\n  name?: string\n  description?: string\n  statisticsGroup: StatisticsGroupId\n}\n\n/**\n * A map of name->Statistics object returned from a statistics request\n */\nexport type StatisticsList = { [statisticKeyId: string]: StatisticValues }\n\nexport enum SRID {\n  SRID_3857 = 3857,\n  SRID_4326 = 4326\n}\n\n/**\n *\n */\nexport interface BenchmarkCriteria {\n  source: string,\n  minEnd: number,\n  minStart: number\n  factor: number\n}\n\n/**\n *\n */\nexport interface SimilarityCriteria {\n  source: string,\n  minutes: number,\n  factor: number\n}\n\n/**\n * A lat, lng position with the addition of an id\n */\nexport interface LatLngId {\n  id: any\n  lat: number\n  lng: number\n}\n\n/**\n * A LatLngId decorated with a travel time, usually return from an r360 service\n */\nexport interface LatLngIdTravelTime extends LatLngId {\n  travelTime?: number\n}\n\n/**\n * Describes metadata about a single statistic in a StatisticsGroup\n */\nexport interface StatisticsItemMeta {\n\n  statistic_id: number\n\n  /**\n   * Minimum cell value for this StatisticsItem\n   */\n  min: number\n\n  /**\n   * Minimum cell value for this StatisticsItem\n   */\n  max: number\n\n  /**\n   * Average cell value for this StatisticsItem\n   */\n  avg: number\n\n  /**\n   * Sum of all cell values for this StatisticsItem\n   */\n  sum: number\n\n  /**\n   * Standard deviation for this StatisticsItem\n   */\n  std: number\n\n  /**\n   * Indicates if the cell values are to be seen as absolute or relative values\n   */\n  type: 'ABSOLUTE' | 'PERCENT'\n\n  /**\n   * Names of the StatisticsItem in different languages\n   */\n  names: {\n    en: string,\n    [langCode: string]: string\n  }\n\n  /**\n   * Description of the StatisticsItem in different languages\n   */\n  descriptions: { [langCode: string]: string }\n\n  /**\n   * Breakpoints based on different statistical clustering approaches\n   */\n  breakpoints: {\n    equal_interval?: {\n      c9: number[],\n      c7: number[],\n      c5: number[],\n      [n: string]: number[]\n    },\n    kmeans?: {\n      c9: number[],\n      c7: number[],\n      c5: number[],\n      [n: string]: number[]\n    },\n    [method: string]: {\n      c9: number[],\n      c7: number[],\n      c5: number[],\n      [n: string]: number[]\n    }\n  }\n}\n\n/**\n * Describes metadata about a specific StatisticsSet (details https://service.route360.net/vector-statistics/statistics/list/v1)\n */\nexport interface StatisticsGroupMeta {\n\n  id: number\n\n  /**\n   * Minimum map zoom level to display the group on a map\n   */\n  min_zoom: number,\n\n  /**\n   * TODO\n   */\n  table: string\n\n  /**\n   * SRID projection\n   */\n  srid: SRID\n\n  /**\n   * TODO\n   */\n  type: string\n\n  /**\n   * TODO\n   */\n  source: string\n\n  created: Date,\n  license: string,\n  modified: Date,\n  numberofpoints: number,\n  version: string,\n  bounding_box: {\n    top_right: LatLng,\n    bottom_left: LatLng\n  },\n\n  /**\n * Description of the StatisticsGroup in different languages\n */\n  names: {\n    [langCode: string]: string\n  },\n\n  /**\n * Description of the StatisticsGroup in different languages\n */\n  descriptions: {\n    [langCode: string]: string\n  },\n  ignorevalues: number[],\n  stats: StatisticsItemMeta[]\n}\n\n/**\n * Padding object\n */\nexport interface PaddingObject {\n  top?: number,\n  bottom?: number,\n  left?: number,\n  right?: number\n}\n\n/**\n * Options object for setBounds function\n * @param {PaddingObject} padding The padding to apply to map on bounds fit.\n */\nexport interface SetBoundsOptions {\n  padding?: PaddingObject\n}\n\n/**\n * Object that will be passed to a request as source\n */\nexport interface LatLngIdTravelMode extends LatLngId {\n  tm?: {car: {rushHour?: boolean}} | {walk: TravelSpeedValues} | {bike: TravelSpeedValues}| {transit: TransitTravelModeOptions}\n}\n\nexport interface TransitTravelModeOptions {\n  frame?: {date?: number, time?: number, duration?: number}\n  maxTransfers?: number;\n}\n\n/**\n * Osm Type (OSM map feature tags. See: http://wiki.openstreetmap.org/wiki/Map_Features)\n */\nexport interface OSMType {\n  key: string\n  value: string\n}\n\n\nexport interface ReachabilityResult {\n  id: string\n  source: string\n  travelTime: number\n}\n\nexport interface TimeResult {  /**\n  * @General This field defines what travel type is used for Targomo Time Service\n  * (or Routing Service if geojsonCreation = ROUTING_SERVICE).\n  */\n //  travelType: TravelType\n  id: string\n  targets: {\n    id: string\n    travelTime: number\n  }[]\n}\n\n/**\n * @General A store (also called 'depot' sometimes) to which the respective vehicles/transports and orders are associated.\n * Each store will be optimized individually and independently.\n */\nexport interface FpStore {\n  /**\n   * @General Unique ID that is required to be set so that Order and Vehicle can reference to their respective store.\n   * @Nullable No.\n   */\n  uuid: string;\n  /**\n   * @General Name of the store.\n   * @Format Cannot be longer than 256 chars.\n   */\n  name?: string;\n  /**\n   * @General Location of the store.\n   * @Format For store addresses the geocoordinates(lat, lng) must be present in the FpAddress object.\n   */\n  address: FpAddress;\n}\n\n/**\n * @General Stores, Orders, and Transports/Vehicles have addresses associated to determine their location.\n * @Performance Preferably these addresses are already geocoded in the WGS84 format (in lat, lng).\n * Otherwise, the geocoordinates are calculated during the request from the other address details (street, city, etc.).\n * This only happens for order addresses. For store and start or endDestination addresses geocoordinates (lat, lng) must exist already.\n */\nexport interface FpAddress {\n  /**\n   * @General A unique id which can be used to map the order entity back to the original after the request.\n   */\n  uuid?: string;\n  /**\n   * @General Amount of time it takes to carry out an order for this address in seconds.\n   * @default 0\n   * @Format Time in seconds.\n   * @Nullable This value is only important for addresses in orders.\n   */\n  avgHandlingTime?: number;\n  /**\n   * @General Latitude of the geocoordinates of the the address.\n   * @Nullable This is required for addresses in store and start or endDestination.\n   * @Format WGS84 format.\n   * @Default If no value is set the result will include a warning and the default of 1 second is assumed,\n   * i.e. after arrival the transport departs one second later.\n   */\n  lat?: number;\n  /**\n   * @General Longitude of the geocoordinates of the the address.\n   * @Nullable This is required for addresses in store and start or endDestination.\n   * @Format WGS84 format.\n   */\n  lng?: number;\n  name?: string;\n  street?: string;\n  streetDetails?: string;\n  postalCode?: string;\n  city?: string;\n  country?: string;\n  phone?: string;\n}\n\n/**\n * @General The order object describes the entities that need to be serviced by the transports of the same associated store.\n */\nexport interface FpOrder {\n  /**\n   * @General A unique id which can be used to map the order entity back to the original after the request.\n   */\n  uuid?: string;\n  /**\n   * @General To associate the order entity to a store.\n   * @Format This id must be identical with one of the uuids in the store objects.\n   * @Nullable No\n   */\n  storeUuid: string;\n  /**\n   * @General The location of the order.\n   * When specifying an order setting its address is mandatory.\n   * However, for the optimization only the fields lat, lng, and avgHandlingTime are of relevance.\n   * @Example\n   * ``` js\n   * address = {\n   *  lat: 13.380707532171671,\n   *  lng: 52.532420302239096,\n   *  avgHandlingTime: 300\n   * }\n   * ```\n   * @Performance It is sufficient to specify an order’s address without geo-coordinates.\n   * The missing information is derived from the address details via geocoding.\n   * This can lead to small runtime impairments for many addresses, since the geocoding accesses an external service.\n   * The resulting geodata must not be saved.\n   */\n  address: FpAddress;\n  /**\n   * @General The deadline (time and date) for an order to be serviced.\n   * The optimization algorithm tries to minimize the amount of deadlines that are not kept.\n   * Deadline will be ignored if visitingTimes were set.\n   * @Format Expressed according to ISO 8601.\n   * @Default null\n   */\n  deadline?: string;\n\n  /**\n   * @General The user can specify within what time intervals the order can be serviced via visitingTimes.\n   * The actual planned visits have to be within these time intervals - this includes the time at the premise (see address.avgHandlingTime).\n   * The start of the first interval as well as the end of the last interval can be null or undefined, which means there are no total lower\n   * or upper boundaries only breaks in which the order cannot be serviced.\n   * @Example\n   * ``` js\n   * visitingTimes = [{\n   *  end: \"2012-04-23T18:00:00.000Z\"\n   * },{\n   *  start: \"2012-04-24T08:00:00.000Z\"\n   * }]\n   * ```\n   * means that the order cannot be serviced between 23.04.2012, 6pm and 24.04.2012, 8am but at any other time before or after.\n   *\n   * The user can also define just lower or upper boundaries for orders with only setting one or the other:\n   * start or end of a single visiting time interval, e.g.\n   * `visitingTimes = [{ end: \"2012-04-23T18:00:00.000Z\" }]`\n   * means that the order must have been serviced/visited before the specified time (including the handling time at the address).\n   * @Alternative If only an upper boundary for the visit is important the user can also simply choose to define this via the deadline\n   * parameter. The difference here is that the handling time at the address is not included in the specified time,\n   * i.e. if the vehicle/transport arrives at the location before the deadline then this time constraint is met.\n   * For instance consider the visitingTimes from above: if the avgHandlingTime of this order's address is 300 (=5 minutes) then setting\n   * the deadline to \"2012-04-23T17:55:00.000Z\" would be equivalent with visiting times.\n   * Simplified: visitingTimes[0].end = deadline + address.avgHandlingTime.\n   * Note, that deadline and visitingTimes cannot both be set for one order. This will result in the deadline value to be ignored\n   * (+ warning) in favour of the visitingTimes.\n   * @Performance Generally, the optimization tries to fit all orders into the specified visiting hours/deadlines and within the valid\n   * working hours of the assigned vehicle. If this is not possible orders will be outside of these time constraints, i.e. after the last\n   * visiting end time (or deadline) or after the valid working hours of the vehicle. This will result in penalty points for not meeting\n   * the respective time constraints or to filtering out (i.e. not servicing) the orders depending on how the optimization was configured\n   * (see OptimizationMetadata).\n   * @Format Expressed according to ISO 8601.\n   * @Default []\n   */\n  visitingTimes?: {start: string, end: string}[];\n  /**\n   * @General The user can define a respective load to specify the use case specific characteristics of the order.\n   * @Example\n   * ``` js\n   * load = {\n   *  bottles: 12\n   *  weight: 5\n   *  crate: 1\n   * }\n   * ```\n   * @Min Greater than or equal to 0\n   * It is not allowed to have a single Order whose single load is smaller than the smallest minSingle of all of the load's\n   * loadRestrictions of the vehicles\n   * @Max Smaller than 2147483648\n   * It is not allowed to have a single Order whose single load is larger than the largest maxSingle of all of the load's\n   * loadRestrictions of the vehicles (or maxSum if the former is not specified)\n   * In addition, the total loads of all Orders of a Store must not exceed the total of all of the load's maxSum of its associated Vehicles.\n   * @Default If no value was defined for a load for which a load restriction exists, then that load is assumed to be 0.0.\n   * If no restrictions for a load in any of the vehicles of the associated store exist the value is ignored (i.e. removed from the list).\n   * @Format The physical units of the load values, e.g. for weight and volume, must match the units of the associated loadRestrictions\n   * in the Vehicle.\n   */\n  load?: {[key: string]: number};\n\n  /**\n   * @General The priority specifies the priority of an order. This has effects on:\n  * - Validation: If the order number or the total order volume/weight is too high, first orders with a lower rather than a higher\n  * priority are removed.\n  * - Optimization: It is preferable to try to keep the deadlines of orders with higher priority.\n  * Here, the priority of the order represents the number of penalty points it acquires for not meeting the order’s deadline.\n  * For example, not meeting a deadline of an order with priority 10 is penalty-equivalent with not meeting the deadline of\n  * 10 orders with priority 1. If the optimization is to have priority classes,\n  * i.e. orders of a higher priority class are more important than infinitely many orders of a lower priority class,\n  * we suggest the usage of a \"folding technique\": Consider you have 12 orders, 4 of each priority \"low\", \"medium\", and \"high\".\n  * The low priority orders are assigned the value 1, the orders with medium priority are assigned the value 5,\n  * and the orders with the high priority are assigned the value 25.\n  * With this configuration you could always ensure that the meeting of a deadline of one higher priority order is\n  * more important than the meeting of deadlines of all lower priority orders.\n  * ! Please note that this technique can cause \"NumberOverflow\" errors for too many classes and orders.\n  * @Default 1\n   */\n  priority?: number;\n\n  /**\n   * @General A potential service comment for that order.\n   * @Format Length cannot exceed 5000 chars.\n   */\n  comments?: string;\n\n  /**\n   * @General With demands an order can be annotated with a list of things that need to be met by the supplies of the servicing/visiting\n   * vehicle, i.e. all demands of an order have to be contained in the list of the supplies of a vehicle for the vehicle to be eligible\n   * to service this order.\n   * @Example\n   * `demands = [\"dangerous_goods\", \"region_germany\"]`\n   * Means that this order needs to be serviced by a transport that has at least \"dangerous_goods\" and \"region_germany\" in its list of\n   * supplies.\n   * @Default []\n   */\n  demands?: string[];\n\n  /*\n   * @General If a tag is listed in optimizationMetadata.nonParallelOrdersByTags then they restrict the optimization in a way that some\n   * orders are not allowed to be serviced in parallel when they have the same values for the specified tags. Using tags for that purpose\n   * makes sense if some orders share the same external resource which would have to be present at both locations.\n   * @Example\n   * ``` js\n   * \"tags\" : {\n   *  \"facility manager\":\"Max Mustermann\",\n   *  \"owner\": \"Muster AG\"\n   * }\n   * ```\n   * It means that if another order exists that has the same \"facility manager\":\"Max Mustermann\" or \"owner\": \"Muster AG\" (or both) then\n   * they cannot be serviced in parallel since for both visits the same facility manager and/or owner has to be present.\n   */\n  tags?: {[key: string]: string};\n}\n\n/**\n * @General A transport is the entity which services the orders and for which the optimization finds the best order allocations\n * as well as the best routes.\n */\nexport interface FpTransport {\n  /**\n   * @General The vehicle entity describes the fixed parameters of a transport.\n   */\n  vehicle: FpVehicle;\n  /**\n   * @General Metadata defining variable specifics for the vehicle/transports.\n   */\n  metadata?: FpTransportMetadata;\n}\n/**\n * @General The vehicle entity describes the fixed parameters of a transport.\n * Parameters name, plate, avgFuelConsumption, and fuelType are currently not relevant for the optimization.\n */\nexport interface FpVehicle {\n  /**\n   * @General A unique id which can be used to map the order entity back to the original after the request.\n   */\n  uuid?: string;\n  /**\n   * @General To associate the vehicle entity to a store.\n   * @Format This id must be identical with one of the uuids in the store objects.\n   * @Nullable No\n   */\n  storeUuid: string;\n\n  /**\n   * @General For each use case specific load key, for instance \"weight\", \"volume\", \"item\", the user can define restrictions\n   * @Example\n   * ``` js\n   * loadRestrictions = {\n   *  weight: { maxSum\": 100 },\n   *  volume: { maxSum\": 2000, \"minSingle\": 100, \"maxSingle\": 200 },\n   *  item: { minSum\": 10, \"maxSum\": 20 }\n   * }\n   * ```\n   */\n  loadRestrictions?: {\n    [key: string]: {\n      maxSum: number,\n      minSum: number,\n      minSingle: number,\n      maxSingle: number\n    }\n  }\n\n  /**\n   * @General Vehicles should be annotated with a priority to rank their importance with regards to their respective keeping time\n   * constraints, i.e. when valid working hours (from earliestDepartureTime until latestArrivalTime) are exceeded the penalty for not\n   * finishing the tour on time is multiplied by the factor priority. In this way vehicle with a higher are more likely having tours\n   * that are still within their specified working hours. For instance, the optimization would evaluate the meeting of the time constraints\n   * of a vehicle with the priority of 50 as high as meeting the time constraints of five vehicles with a priority of 10. That also applies\n   * when secondsToPenaltyRatioForOutOfWorkingHours is set.\n   * @Default If the priority is not specified the service will assume a priority of 1 and include a warning in the tour planning result.\n   */\n  priority: number;\n\n  /**\n   * @General With supplies a vehicle can be annotated with a list of items or expertise that it provides so it can fulfil the demands of\n   * orders, i.e. all demands of an order have to be contained in the list of the supplies of a vehicle for the vehicle to be eligible to\n   * service this order.\n   * @Example `supplies = [\"dangerous_goods\", \"normal_goods\", \"region_germany\", \"region_benelux\"]`\n   * Means that this vehicle can service any order that demands \"normal_goods\", \"dangerous_goods\", \"region_germany\", or\n   * \"region_benelux\" or any combination of that, e.g. its tour can include an order with dangerous goods in Germany.\n   */\n  supplies?: string[];\n\n  /**\n   * An optional parameter that is used in the route optimization. With this parameter all or some vehicles can be annotated with extra\n   * costs (in seconds if travel costs are travel times) that are added during the optimization if a tour for this vehicle was created.\n   * This can be used, for instance, to motivate the usage of certain vehicles over other vehicles (the preferred vehicle should have a\n   * smaller fixed cost), or to generally penalize the usage of many vehicles (e.g. if all vehicles have a value set of $300$ it means\n   * that the optimization tries to fulfil all requirements with as few cars as possible and only would add a tour/vehicle if the travel\n   * costs can be reduced by at least $300$ (or more deadlines can be met)).\n   * @Min If specified it has to be equal or greater than 0.\n   * @Default 0\n   */\n  fixedTravelCosts?: number;\n\n  name?: string;\n  plate?: string;\n  avgFuelConsumption?: number;\n  fuelType?: string;\n}\n\n/**\n * @General Metadata defining variable specifics for the vehicle/transports.\n * @Example The three parameters earliestDepartureTime, latestArrivalTime, and interruptionTimes constitute the transport's valid\n * working hours. In the example below the vehicle has a valid working hour from 8 to 18 with a 2 hour break from 12 to 14:\n * ``` js\n * metadata = {\n *  earliestDepartureTime: \"2012-04-23T08:00:00.000Z\",\n *  latestArrivalTime: \"2012-04-23T18:00:00.000Z\",\n *  interruptionTimes: [{\n *   start: \"2012-04-23T12:00:00.000Z\",\n *   end: \"2012-04-23T14:00:00.000Z\"\n *  }]\n * }\n * ```\n */\nexport interface FpTransportMetadata {\n  /**\n   * @General Specifies from when on the transport would be ready to service the orders,\n   * e.g. because right now it is still being refuelled.\n   * @Format Expressed according to ISO 8601\n   * @Default If no earliestDepartureTime is specified, it is assumed that the vehicle is immediately ready for departure.\n   */\n  earliestDepartureTime?: string;\n\n  /**\n   * @General latestArrivalTime can be set to when the tour for this transport/vehicle has to end at the latest.\n   * @Default If no value was set it is assumed that no latest end date for this transport/vehicle exists.\n   */\n  latestArrivalTime?: string;\n\n  /**\n   * @General Breaks within the working hours (from earliestDepartureTime to latestArrivalTime) can be set with interruptionTimes.\n   * In the specified interruption times the transport/vehicle cannot service orders or travel between them.\n   * If these breaks fall within the tour (-item) the result will contain these in the tourItem.interruptions parameter.\n   * @Format Both, start and end dates must be set for all time intervals of interruption times.\n   */\n  interruptionTimes?: {start: string, end: string}[]\n\n  /**\n   * @General The start location of the vehicle.\n   * @Default If no start address was specified,\n   * the address of the store referenced in the Vehicle is assumed to be the start address of the transport's tour.\n   * @Format For start addresses, the geocoordinates(lat, lng) must exist already.\n   */\n  start?: FpAddress ;\n  /**\n   * @General The field endDestinations contains the potential end points of the vehicle.\n   * @Performance If multiple endDestinations are specified, finding the best endpoint is part of the optimization.\n   * @Format The semantics for its configuration is:\n   * - List empty: The last delivered order is also the end point of the route.\n   * - One list entry: The route must end at this fixed end point.\n   * - Multiple list entries: The selection of the best end point is part of the optimization.\n   * For end destination addresses the geocoordinates(lat, lng) must exist already.\n   */\n  endDestinations?: FpAddress[];\n}\n/**\n * @General Specifies factors with which the travel times of the edges are adjusted.\n * This may be necessary in certain areas where the travel time calculation is\n * almost always off by a certain factor, e.g. Paris rush hour.\n * Transit travel times are not affected by the travelTimeFactors\n * @Example `\"travelTimeFactors\" : { \"all\":0.5, \"motorway\":1.5, .... (other specific edge classes possible) },..`\n * @Min Minimum allowed cumulative travel time factor is `0.5`\n * @Max Maximum allowed cumulative travel time factor is `100.0`\n * @Format\n * Travel time factor of 1.5 means 50% more time is needed\n * (on top of a specified one, e.g. for the example above 1.5*0.5=0.75 - the final applied travel time factor for 'motorway' edges)\n * @Nullable All elements are optional\n */\nexport interface TravelTimeFactors {\n  /**\n   * @General Has an effect on all edge classes (excluding transit travel times)\n   */\n  all: number,\n\n  motorway: number,\n  motorway_link: number,\n  trunk: number,\n  trunk_link: number,\n  primary: number,\n  primary_link: number,\n  secondary: number,\n  secondary_link: number,\n  tertiary: number,\n  residential: number,\n  tertiary_link: number,\n  road: number,\n  unclassified: number,\n  service: number,\n  living_street: number,\n  pedestrian: number,\n  track: number,\n  path: number,\n  cycleway: number,\n  footway: number,\n  steps: number,\n  unknown: number\n}\n","import { TravelRequestOptions, UseCacheRequestOptions } from '../requestOptions';\n\nexport enum MultigraphRequestAggregation {\n  NONE = 'none',\n  SUM = 'sum',\n  MAX = 'max',\n  MIN = 'min',\n  MEAN = 'mean',\n  MEDIAN = 'median',\n  NEAREST = 'nearest',\n  UNION = 'routing_union',\n  MATH = 'math',\n  GRAVITATION = 'gravitation_huff'\n}\n\nexport enum MultigraphRequestLayer {\n  IDENTITY = 'identity',\n  TILE = 'tile',\n  HEXAGON = 'hexagon',\n  CUSTOM_GEOMETRIES = 'custom_geometries'\n}\n\nexport interface MultigraphAggregationOptions {\n  type: MultigraphRequestAggregation\n  ignoreOutliers?: boolean\n  outlierPenalty?: number\n  minSourcesRatio?: number\n  minSourcesCount?: number\n  maxResultValue?: number\n  maxResultValueRatio?: number\n  filterValuesForSourceOrigins?: string[]\n  gravitationExponent?: number\n  mathExpression?: string\n  postAggregationFactor?: number\n  aggregationInputParameters?: {\n    [parameterName: string]: {\n      inputFactor?: number\n      gravitationAttractionStrength?: number\n      gravitationPositiveInfluence?: number\n    }\n  }\n}\n\n\nexport interface MultigraphSpecificRequestOptions {\n\n  preAggregationPipeline: {\n    [pipelineName: string]: MultigraphAggregationOptions\n  }\n\n  referencedStatisticIds: {\n    [parameterName: string]: number\n  }\n\n  aggregation: MultigraphAggregationOptions\n\n  serialization: {\n    format: 'geojson' | 'json' | 'mvt'\n    decimalPrecision?: number\n    maxGeometryCount?: number\n  }\n\n  domain: {\n    type: 'edge' | 'node' | 'statistic_geometry'\n    edgeAggregationType?: 'min' | 'max' | 'mean'\n    statisticGroupId?: number\n  }\n\n  layer: {\n    type: MultigraphRequestLayer\n    edgeAggregationType?: 'min' | 'max' | 'mean'\n    geometryDetailPerTile?: number\n    minGeometryDetailLevel?: number\n    maxGeometryDetailLevel?: number\n    geometryDetailLevel?: number\n    customGeometryMergeAggregation?: 'max' | 'mean' | 'min' | 'sum'\n  }\n\n  edgeClasses?: number[]\n}\n\nexport interface MultigraphRequestOptions extends TravelRequestOptions, UseCacheRequestOptions {\n  multigraph: MultigraphSpecificRequestOptions;\n\n}\n","import {LatLng} from '../types'\n\nexport interface Projection {\n  project(latlng: LatLng): {x: number, y: number}\n  unproject(point: {x: number, y: number}): LatLng\n}\n\nexport const sphericalMercator: Projection = new class {\n  private R = 6378137 // constant for Earth's radius\n\n  project(latlng: LatLng) {\n    let d = Math.PI / 180\n    let max = 1 - 1E-15\n    let sin = Math.max(Math.min(Math.sin(latlng.lat * d), max), -max)\n\n    return {\n      x: this.R * latlng.lng * d,\n      y: this.R * Math.log((1 + sin) / (1 - sin)) / 2\n    }\n  }\n\n  unproject(point: {x: number, y: number}) {\n    let d = 180 / Math.PI\n\n    return {\n      lat: (2 * Math.atan(Math.exp(point.y / this.R)) - (Math.PI / 2)) * d,\n      lng: point.x * d / this.R\n    }\n  }\n}\n","import { LatLng, BoundingBox, TravelType } from './../types/index'\nimport * as projection from './projection'\n\n/**\n * Some reusable functions that deal with lat/lng gemoetry calculations\n */\n\nconst EARTH_RADIUS_KM = 6371.01\nconst RADIANS = Math.PI / 180\n// const DEGREES = 180 / Math.PI\n\n/**\n * Return whether a lat/lng point is contained within a bounding box\n */\nexport function contains(bBox: BoundingBox, point: LatLng) {\n  return point.lat >= bBox.southWest.lat && point.lat <= bBox.northEast.lat &&\n    point.lng >= bBox.southWest.lng && point.lng <= bBox.northEast.lng\n}\n\n\n/**\n * Returns the distance in kilometers between two lat/lng points\n */\nexport function calculateDistance(from: LatLng, to: LatLng) {\n  const fromLat = RADIANS * from.lat\n  const fromLng = RADIANS * from.lng\n  const toLat = RADIANS * to.lat\n  const toLng = RADIANS * to.lng\n\n  return Math.acos(\n    Math.sin(fromLat) * Math.sin(toLat) +\n    Math.cos(fromLat) * Math.cos(toLat) *\n    Math.cos(fromLng - toLng)) * EARTH_RADIUS_KM\n}\n\n/**\n *\n * Creates a bounding box around a point\n *\n * @param from\n * @param distance distance in km\n */\nexport function boundingBox(from: LatLng, distance: number): BoundingBox {\n  distance = distance * 1000\n\n  const lat = from.lat\n  const lng = from.lng\n\n  const latRadians = lat * RADIANS\n\n  const DELTA_LAT_KM = 110.574235\n  const DEGREES_LONG_KM = 110.572833 * Math.cos(latRadians)\n\n  const deltaLat = distance / 1000.0 / DELTA_LAT_KM\n  const deltaLong = distance / 1000.0 / DEGREES_LONG_KM\n\n  const topLat = lat + deltaLat\n  const bottomLat = lat - deltaLat\n  const leftLng = lng - deltaLong\n  const rightLng = lng + deltaLong\n\n  return {\n    northEast: {\n      lat: topLat, lng: rightLng\n    },\n    southWest: {\n      lat: bottomLat, lng: leftLng\n    }\n  }\n}\n\n/**\n * Give a list of locations return only those that are in proximity (predefined based on given TravelOptions)\n * to any location in the  `from` list\n * The use of this is to reduce the inputs to reachability and other requests (pre-filtering out remote targets) for perfromance reasons\n *\n * @param locations  The list to be filtered\n * @param from  results will be in proximity to these\n * @param options traveloptions (affect the distance around the `from` list that will be considered)\n */\nexport function locationsWithinTravelOptions<T extends LatLng>(locations: T[], from: LatLng | LatLng[],\n  options: {\n    maxEdgeWeight: number,\n    edgeWeight: 'time' | 'distance',\n    travelType: TravelType\n  }) {\n  const maxEdgeWeight = options.maxEdgeWeight\n  let speed: number;\n  switch (options.travelType) {\n    case 'walk': speed = 10; break;\n    case 'bike': speed = 25; break;\n    case 'transit': speed = 150; break;\n    default: speed = 120; break;\n  }\n\n  const distanceKm = (options.edgeWeight === 'distance')\n    ? Math.round(maxEdgeWeight / 1000)\n    : (speed * maxEdgeWeight / 3600)\n  return locationsWithinDistance(locations, from, distanceKm)\n}\n\nfunction getSpeed(options: {\n  maxEdgeWeight: number,\n  edgeWeight: 'time' | 'distance',\n  travelType: TravelType\n}) {\n  switch (options.travelType) {\n    case 'walk': return 10\n    case 'bike': return 25\n    case 'transit': return 150\n    default: return 120\n  }\n}\n\n/**\n * Creates a bounding box around a location, with parametres about the distance calculated (based on predefined internal logic)\n * from a give TravelOptions\n *\n * @param from\n * @param options\n */\nexport function boundingBoxWithinTravelOptions<T extends LatLng>(\n  from: T,\n  options: {\n    maxEdgeWeight: number,\n    edgeWeight: 'time' | 'distance',\n    travelType: TravelType\n  }) {\n  const maxEdgeWeight = options.maxEdgeWeight\n  const speed: number = getSpeed(options)\n  const distanceKm = (options.edgeWeight === 'distance')\n    ? Math.round(maxEdgeWeight / 1000)\n    : (speed * maxEdgeWeight / 3600)\n  return boundingBox(from, distanceKm)\n}\n\n\n/**\n * Create a bounding box from an Array of latlng locations\n *\n * @param locations location array to get the bbox from\n */\nexport function boundingBoxFromLocationArray<T extends LatLng>(locations: T[]): BoundingBox {\n  const bbox = locations.reduce((acc, val) => {\n    acc.northEast.lat = (val.lat > acc.northEast.lat) ? val.lat : acc.northEast.lat\n    acc.northEast.lng = (val.lng > acc.northEast.lng) ? val.lng : acc.northEast.lng\n    acc.southWest.lat = (val.lat < acc.southWest.lat) ? val.lat : acc.southWest.lat\n    acc.southWest.lng = (val.lng < acc.southWest.lng) ? val.lng : acc.southWest.lng\n    return acc\n  }, {\n      northEast: {\n        lat: locations[0].lat, lng: locations[0].lng\n      },\n      southWest: {\n        lat: locations[0].lat, lng: locations[0].lng\n      }\n    })\n  return bbox\n}\n\n\n/**\n * Creates a bounding box around a list location, with parameters about the distance calculated * (based on predefined internal logic)\n * from a give TravelOptions.\n * The bounding box returned will be the maximum bounding box that will include all bounding boxes generated for each location\n *\n * @param sources\n * @param options\n */\nexport function boundingBoxListWithinTravelOptions(sources: LatLng[], options: {\n  maxEdgeWeight: number,\n  edgeWeight: 'time' | 'distance',\n  travelType: TravelType\n}): BoundingBox {\n  const maxEdgeWeight = options.maxEdgeWeight\n  const speed: number = getSpeed(options)\n  const distanceKm = (options.edgeWeight === 'distance')\n    ? Math.round(maxEdgeWeight / 1000)\n    : (speed * maxEdgeWeight / 3600)\n\n  const boundingBoxResult = {\n    northEast: {\n      lat: -Infinity, lng: -Infinity\n    },\n    southWest: {\n      lat: Infinity, lng: Infinity\n    }\n  }\n\n  sources.forEach(source => {\n    const box = boundingBox(source, distanceKm)\n\n    boundingBoxResult.northEast.lat = Math.max(boundingBoxResult.northEast.lat, box.northEast.lat)\n    boundingBoxResult.northEast.lng = Math.max(boundingBoxResult.northEast.lng, box.northEast.lng)\n    boundingBoxResult.southWest.lat = Math.min(boundingBoxResult.southWest.lat, box.southWest.lat)\n    boundingBoxResult.southWest.lng = Math.min(boundingBoxResult.southWest.lng, box.southWest.lng)\n  })\n\n  return boundingBoxResult\n}\n\n/**\n * Given a list of locations return only those that are within `distanceKm` to any location in the\n * `from` list, and which are not included in the `from` locations\n *\n * @param locations\n * @param from\n * @param distanceKm\n */\nexport function locationsWithinDistance<T extends LatLng>(locations: T[], from: LatLng | LatLng[], distanceKm: number) {\n  if (from instanceof Array) {\n    return locationsWithinDistanceInclusive(locations, from, distanceKm).filter(location => !from.some(item => item == location))\n  } else {\n    return locationsWithinDistanceInclusive(locations, from, distanceKm).filter(location => from != location)\n  }\n}\n\n/**\n * Given a list of locations return only those that are within `distanceKm` to any location in the  `from` list\n *\n * @param locations\n * @param from\n * @param distanceKm\n */\nexport function locationsWithinDistanceInclusive<T extends LatLng>(locations: T[], from: LatLng | LatLng[], distanceKm: number) {\n  if (from instanceof Array) {\n    return locations.filter(location => from.some(point => calculateDistance(location, point) <= distanceKm))\n  } else {\n    return locations.filter(location => calculateDistance(location, from) <= distanceKm)\n  }\n}\n\n\n/**\n *\n * @param point\n * @param elevation\n */\nexport function webMercatorToLatLng(point: { x: number, y: number }, elevation: number) {\n  let latlng = projection.sphericalMercator.unproject(point)\n\n  if (elevation != undefined) {\n    // x,y,z given so we have elevation data\n    return { lat: latlng.lat, lng: latlng.lng, elevation }\n  } else {\n    // no elevation given, just unproject coordinates to lat/lng\n    return latlng\n  }\n}\n\n/**\n *\n * @param latlng\n */\nexport function latLngToWebMercator(latlng: LatLng) {\n  const point = projection.sphericalMercator.project(latlng)\n  // point.x *= 6378137\n  // point.y *= 6378137\n  return point\n}\n","// Barrel for geometry module. See https://angular.io/guide/glossary#barrel\nexport * from './geometry'\n","import * as geometry from '../../geometry'\nimport { TargomoClient } from '../../api/targomoClient';\nimport { LatLng } from '../types';\n\n/**\n * Represents a continuous segment of a route using one travel mode\n */\nexport class RouteSegment {\n  readonly type: string\n\n  readonly points: LatLng[]\n  readonly travelTime: number\n  readonly distance: number\n  readonly warning: string\n  readonly elevationGain: number\n  readonly transitSegment: boolean\n  readonly startName: string\n  readonly endName: string\n\n  readonly routeType: any\n  readonly routeShortName: string\n  readonly routeLongName: string\n  readonly departureTime: number\n  readonly arrivalTime: number\n  readonly tripHeadSign: string\n\n  constructor(client: TargomoClient, segment: any) {\n    this.points          = []\n    this.type            = segment.type\n    this.travelTime      = segment.travelTime\n\n    /*\n    * TODO don't call it length! in route length refers to the array length.\n    * Call it distance instead\n    */\n    this.distance        = segment.length / 1000\n    this.warning         = segment.warning\n    this.elevationGain   = segment.elevationGain\n    this.transitSegment  = false\n    this.startName       = segment.startname\n    this.endName         = segment.endname\n\n    // build the geometry\n    segment.points.forEach((point: number[]) => {\n      this.points.push(geometry.webMercatorToLatLng({x: point[1], y: point[0]}, point[2]))\n    })\n\n    // in case we have a transit route, we set information which are only available\n    // for transit segments like depature station and route short sign\n    if ( segment.isTransit ) {\n      this.transitSegment = true\n      this.routeType      = segment.routeType\n      this.routeShortName = segment.routeShortName\n      this.routeLongName  = segment.routeLongName\n      this.startName      = segment.startname\n      this.endName        = segment.endname\n      this.departureTime  = segment.departureTime\n      this.arrivalTime    = segment.arrivalTime\n      this.tripHeadSign   = segment.tripHeadSign\n    }\n  }\n}\n","import { RouteSegment } from './routeSegment'\nimport { LatLng } from '../index';\nimport { TargomoClient } from '../../api/targomoClient';\n\n/**\n *\n */\nexport class Route {\n  readonly travelTime: number\n  readonly routeSegments: RouteSegment[]\n  readonly points: LatLng[]\n  readonly uphillMeter: number\n  readonly downhillMeter: number\n  readonly targetHeight: number\n  readonly sourceHeight: number\n  readonly sourceId: any\n  readonly targetId: any\n  readonly length: number\n  readonly transfers: any\n\n  readonly departureTime: number\n  readonly arrivalTime: number\n\n  readonly totalElevationDifference: number\n  readonly distance: number\n  readonly elevationGain: number\n\n  constructor(client: TargomoClient, travelTime: number, segments: any[], meta: any) {\n    this.travelTime      = travelTime\n    this.routeSegments   = []\n    this.targetHeight    = undefined\n    this.sourceHeight    = undefined\n    this.sourceId        = undefined\n    this.targetId        = undefined\n    this.length          = undefined\n\n    let transfers = 0\n    let points: LatLng[] = []\n    // the server delivers the route from target to source\n    segments.reverse().forEach((segment) => {\n      let routeSegment = new RouteSegment(client, segment)\n      this.routeSegments.push(routeSegment)\n\n      if (routeSegment.type === 'TRANSFER') {\n        transfers++\n      }\n\n      points = points.concat(routeSegment.points.reverse())\n    })\n\n    this.points          = points\n    this.transfers       = transfers\n\n    if (typeof meta !== 'undefined') {\n        this.sourceId = meta.source_id\n        this.targetId = meta.target_id\n        this.length   = meta.length\n    }\n\n    const elevationDifferences = this.calculateElevationDifferences(this.points)\n\n    this.targetHeight = elevationDifferences.targetHeight\n    this.sourceHeight = elevationDifferences.sourceHeight\n    this.uphillMeter = elevationDifferences.uphillMeter\n    this.downhillMeter = elevationDifferences.downhillMeter\n\n    this.totalElevationDifference =  Math.abs(this.sourceHeight - this.targetHeight)\n\n    this.departureTime = this.calculateDepartureTime()\n    this.arrivalTime = this.calculateArrivalTime()\n    this.distance = this.calculateDistance()\n    this.elevationGain = this.calculateElevationGain()\n  }\n\n   private calculateDistance() {\n    let distance = 0\n    for (let i = 0; i < this.routeSegments.length; i++) {\n      distance += this.routeSegments[i].distance\n    }\n    return distance\n  }\n\n  private calculateElevationGain() {\n    let distance = undefined\n    for (let i = 0; i < this.routeSegments.length; i++) {\n      if (isFinite(this.routeSegments[i].elevationGain)) {\n        distance = (distance || 0) + this.routeSegments[i].elevationGain\n      }\n    }\n    return distance\n  }\n\n  // TODO: check again what this does\n  private calculateElevationDifferences(points: LatLng[]) {\n    let previousHeight = undefined\n\n    let targetHeight = undefined\n    let sourceHeight = undefined\n\n    let uphillMeter     = 0\n    let downhillMeter   = 0\n\n    for (let i = this.points.length - 1; i >= 0 ; i--) {\n      if (i == 0) {\n        targetHeight = this.points[i].elevation\n      }\n\n      if (i == this.points.length - 1) {\n        sourceHeight = this.points[i].elevation\n      }\n\n      if (typeof previousHeight != 'undefined') {\n        // we go up\n        if (previousHeight > this.points[i].elevation) {\n          uphillMeter += (previousHeight - this.points[i].elevation)\n        } else if ( previousHeight < this.points[i].elevation ) {\n          // and down\n          downhillMeter += (this.points[i].elevation - previousHeight)\n        }\n      }\n\n      previousHeight = this.points[i].elevation\n    }\n\n    return {targetHeight, sourceHeight, uphillMeter, downhillMeter}\n  } // check why this was like this in original\n\n  private calculateDepartureTime() {\n    let travelTime = 0\n\n    for (let i = 0; i < this.routeSegments.length; i++) {\n      let segment = this.routeSegments[i]\n\n      if (segment.departureTime != null) {\n        return (segment.departureTime - travelTime)\n      } else {\n        travelTime += (segment.travelTime || 0)\n      }\n    }\n\n    return undefined\n  }\n\n  private calculateArrivalTime() {\n    let travelTime = 0\n\n    for (let i = this.routeSegments.length - 1; i >= 0; i--) {\n      let segment = this.routeSegments[i]\n\n      if (segment.arrivalTime != null) {\n        return (segment.arrivalTime + travelTime)\n      } else {\n        travelTime += (segment.travelTime || 0)\n      }\n    }\n\n    return undefined\n  }\n}\n","import {StatisticsItem, StatisticsList, StatisticValues} from '../types'\n\nexport class StatisticsResult {\n  readonly statistics: StatisticsList\n  readonly individualStatistics: {[id: string]: StatisticsList}\n  readonly raw: any\n\n  constructor(result: any, statistics: StatisticsItem[]) {\n    function dataToStatisticgroup(values: any) {\n      const statisticsGroup: StatisticsList = {}\n\n      // Convert to map of named statistics, instead of index based ones\n      for (let statistic of statistics) {\n        statisticsGroup[statistic.name] = new StatisticValues(values[statistic.id])\n      }\n\n      return statisticsGroup\n    }\n\n    const individualStatistics: {[id: string]: StatisticsList} = {}\n    if (result.individualStatistics) {\n      for (let key in result.individualStatistics) {\n        if (result.individualStatistics[key] && result.individualStatistics[key].statistics) {\n          individualStatistics[key] = dataToStatisticgroup(result.individualStatistics[key].statistics)\n        }\n      }\n    }\n\n    this.statistics = dataToStatisticgroup(result.statistics),\n    this.individualStatistics = individualStatistics,\n    this.raw = result\n  }\n}\n","import { BoundingBox } from '..';\n\nexport interface MultigraphInfo {\n\n  /**\n   * id of the multigraph\n   */\n  id?: number\n\n  /**\n   * Number of sources used in the MG layer\n   */\n  amountSources: number\n\n  /**\n   * one of(CERATED,ROUTING,MERGING,AGGREGATING,COMPLETED,FAILED)\n   */\n  status: MultigraphStatus\n\n  /**\n   * 0 when CREATED, 0-1 when ROUTING, 1 when MERGING,AGGREGATING,COMPLETED\n   */\n  routingProgress: number\n\n  /**\n   * if this list contains more than one elements the aggregation values \"may\" be not absolutely correct (due to merging of the graphs)\n   * - can be mitigated with executing \"redo\" (which completely restarts the whole process for the aggregation\n   * - this value is set in MERGING, AGGREGATING, and COMPLETED\n   */\n  baseGraphIds?: number[]\n\n  /**\n   * only set when FAILED\n   */\n  errorMessage?: string\n\n  /**\n   * only set when COMPLETED\n   */\n  minValue?: number\n\n  /**\n   * only set when COMPLETED\n   */\n  maxValue?: number\n\n\n  /**\n   * travelOptions, that were used for this request. (only if detailed flag is used)\n  */\n  travelOptions?: any\n\n  /**\n   * bbox of mg layer\n  */\n  boundingBox?: BoundingBox\n}\n\n/**\n * Lifecycle of a Multigraph:\n *\n * 1. CREATED\n * 2. ROUTING\n * 3. MERGING\n * 4. AGGREGATING\n * 5. COMPLETED / FAILED\n */\nexport enum MultigraphStatus {\n  CREATED = 'CREATED',\n  ROUTING = 'ROUTING',\n  MERGING = 'MERGING',\n  AGGREGATING = 'AGGREGATING',\n  COMPLETED = 'COMPLETED',\n  FAILED = 'FAILED'\n}\n","import { FpVehicle, FpStore, FpAddress, FpOrder, FpTransport } from './../types';\nimport { FeatureCollection, LineString } from 'geojson';\nimport { FpRequestPayload, FpRequestMetadata } from '../../api/payload/fleetsRequestPayload';\n\n/**\n * @General The reponse of the request if the optimization was successfully carried out. It contains the original request body information\n * (plus potential mitigated values). The result of the fleet planning optimization is stored in \"tours\" and additional helpful information\n * with regards to the execution (e.g. messages, mitigated errors) are stored in \"resultStatus\".\n * All elements in the return body (including stores, orders, transports) now have an id field which can be ignored by the client.\n */\nexport class FpResult implements FpRequestPayload {\n    optimizationTime: number;\n    optimizationAlgorithm: 'NO_OPTIMIZATION' | 'GREEDY_TSP' | 'BRUTE_FORCE_TSP' | 'CONSTRAINT_SATISFACTION';\n    optimizationMetadata: FpRequestMetadata;\n    stores: FpStore[];\n    transports: FpTransport[];\n    orders: FpOrder[];\n    /**\n     * @General The ResultStatus contains errors that occurred during the evaluation, but could be mitigated by standard routines.\n     */\n    resultStatus: ResultStatus;\n    /**\n     * @General The main result of the optimizazion. For the available vehicles/transports tours are created that are optimized for fitting\n     * the weight and volume into the respective vehicles, for meeting as many as possible deadlines, and for having the shortest (quickest)\n     * overall tour durations (in that order).\n     */\n    tours: FpTour[];\n}\n\n/**\n * @General The ResultStatus contains errors that occurred during the evaluation, but could be mitigated by standard routines.\n * @Exceptions If the optimization request responds with status code 201, there were no errors and the optimization could be performed\n * without any ’intervention/assumptions’.\n * In 'messages' extra information about the time consumption of the individual steps of the optimization can be found.\n * If the server had to make any interventions or assumptions to correct the problem, the response status code of the request is\n * 202 and the mitigations are noted in ResultStatus.\n * The optimization result is transmitted in exactly the same way as with a 201 response, but now with the additional information,\n * which errors have occurred and how they were ’repaired’.\n * Examples of recoverable errors are:\n * If no geo-data was found for an address (i.e. no data was available or could be obtained via the geocoding service)\n * the order is removed from the query, or if no start address were specified for a transport, the home address of the vehicle is\n * assumed to be the starting point. If errors were encountered that could not be \"corrected\" (e.g., syntax errors, external service\n * errors), the request will fail.\n */\nexport interface ResultStatus {\n\n    /**\n     * @General Overall result of the optimization if successful - NO_ERRORS_RECORDED and result status 201 or\n     * ERRORS_RECORDED and result status 202\n     */\n    overall: 'NO_ERRORS_RECORDED' | 'ERRORS_RECORDED';\n    /**\n     * @General The problems that occurred during the optimization but could be mitigated.\n     * If such Mitigation Errors occur the service reponds with a reuslt und the status code 202.\n     */\n    errors?: MitigatedError[];\n    /**\n     * @General Standard messages like how much time different steps of the optimization have consumed.\n     */\n    messages?: string[];\n}\n\n/**\n * @General The problems that occurred during the optimization but could be mitigated.\n * If such Mitigation Errors occur the service reponds with a reuslt und the status code 202.\n */\nexport interface MitigatedError {\n    /**\n     * @General The request field that had to be adapted, e.g. \"transports[0].metadata.start\" if no start address was given for a tranpsort.\n     */\n    affectedField: string;\n    /**\n     * @General The detailed the description of the error,\n     * e.g. \"start point has to be equal to the address of the store referenced in the vehicle\"\n     */\n    errorDescription: string;\n    /**\n     * @Genral The detailed the description of the error mitigation,\n     * e.g. \"Start address has been set to the address of the store referenced in the vehicle\"\n     */\n    mitigationDescription: string;\n    /**\n     * @General If applicable the original value that had to be adapted,\n     * e.g. the old address that was replaced as part of the mitigation strategy. Can be empty depending on the error and/or mitigation.\n     */\n    original: any;\n}\n\n/**\n * @General The main result of the optimizazion. For the available vehicles/transports tours are created that are optimized for fitting\n * the load into the respective vehicles, for meeting as many as possible time requirements, and for having the shortest (quickest) overall\n * tour durations (in that order).\n */\nexport interface FpTour {\n    /**\n     * @General An estimation of the travel time of the tour in seconds - only the time travelled.\n     */\n    durationTravel: number;\n    /**\n     * @General An estimation of the non-travel time of this tour in seconds, e.g. on-site handling.\n     */\n    durationHandling: number;\n    /**\n     * @General The expected time and date when the tour will start.\n     * Usually equal to the earliestStartDate specified in the transportMetadata.\n     * @Format Expressed according to ISO 8601.\n     */\n    expectedTourStartDate: string;\n    /**\n     * @General The expected time and date when the tour will end.\n     * @Format Expressed according to ISO 8601.\n     */\n    expectedTourEndDate: string;\n    /**\n     * @General Length of the tour in meters. This value can only be set if \"ROUTING_SERVICE\" was chosen for \"geojsonCreation\".\n     */\n    routeLength?: number;\n    /**\n     * @General The sum of any load specified in the orders.\n     * @Example\n     * ``` js\n     * loadSum = {\n     *   weight: 123.1,\n     *   volume: 2005.0\n     * }\n     * ```\n     */\n    loadSum?: {[key: string]: number}\n    /**\n     * @General Overall number of Orders/TourItems contained in this tour.\n     */\n    size: number;\n    /**\n     * @General Total volume of all orders serviced by this tour\n     */\n    store: FpStore;\n    /**\n     * @General The vehicle used to travel this tour.\n     */\n    vehicle: FpVehicle;\n    /**\n     * @General Each Tour consists of multiple TourItems which each represent the servicing of one of the \"orders\".\n     */\n    tourItems: FpTourItem[];\n    /**\n     * @General The location from which the vehicle starts its tour.\n     */\n    tourStart: FpAddress;\n    /**\n     * @General One of the possible endDestinations defined in the TransportMetadata.\n     * Can also be empty if no endDestination for this tour's vehicle was defined.\n     */\n    tourEnd?: FpTourStop;\n\n    /**\n     * @General The FeatureCollection element can be optionally returned for debugging purposes. It contains the calculated tour including\n     * the routes between the individual targets formatted as GeoJSON. The start and end points of the individual routes are represented as\n     * Point and the routes between them as LineString. The data can be uploaded and visualized locally (e.g. with QGIS) or via Internet\n     * (e.g. with http://geojson.io). The geojsonCreation option in OptimizationMetadata can be used to specify if and how the geojson data\n     * is generated.\n     * @Format RFC 7946, https://tools.ietf.org/html/rfc7946\n     */\n    featureCollection: FeatureCollection<LineString>;\n}\n\n/**\n * @General Each Tour consists of multiple TourItems which each represent the servicing of one of the \"orders\".\n * Note: expectedArrival <= expectedStartVisit < expectedDeparture\n */\nexport interface FpTourItem {\n    /**\n     * @General Route distance from the last tour stop to this stop in meters.\n     * Distance is only set if \"ROUTING_SERVICE\" is chosen for \"geojsonCreation\".\n     */\n    distance?: number;\n    /**\n     * @General Time duration it takes from the latest tour stop to this stop in seconds.\n     */\n    duration: number;\n    /**\n     * @General Expected arrival date and time for this stop.\n     */\n    expectedArrival: string;\n    /**\n     * @General The order which will be serviced.\n     */\n    order: FpOrder;\n    /**\n     * @General Ordered index within the tour, e.g. the first element of the tour has index 0, the second has index 1, and so on.\n     */\n    index: number;\n    /**\n     * @General Expected departure date and time for this stop.\n     * @Format Expressed according to ISO 8601.\n     */\n    expectedDeparture: string;\n    /**\n     * @General Expected start of the visit. this can diverge from the expectedArrivalTime due to waiting for the next start of a visiting\n     * time window of the associated order. This waiting time is added to the travel costs (excluding the interruptions that occurre\n     * during that time).\n     * @Format Expressed according to ISO 8601.\n     */\n    expectedStartVisit: string;\n    /**\n     * @General Time in seconds that were still to spare from arrival until the deadline.\n     * This can be negative if the deadline was missed.\n     */\n    spareTime: number;\n\n    /**\n     * @General If interruptions defined in the vehicle occur during this part (tourItem) of the tour they are contained in this list.\n     * An interruption can only be during travel (type=INTERRUPT_TRAVEL) or before the start of the visit (type=INTERRUPT_WAITING).\n     */\n    interruptions?: {start: string, end: string, type: 'INTERRUPT_TRAVEL' | 'INTERRUPT_WAITING'}[]\n}\n\n/**\n * @General One of the possible endDestinations defined in the TransportMetadata.\n * Can also be empty if no endDestination for this tour's vehicle was defined.\n */\nexport interface FpTourStop {\n    /**\n     * @General Route distance from the last tour stop to this stop in meters.\n     * Distance is only set if \"ROUTING_SERVICE was\" chosen for \"geojsonCreation\".\n     */\n    distance?: number;\n    /**\n     * @General Time duration it takes from the latest tour stop to this stop in seconds.\n     */\n    duration: number;\n    /**\n     * @General Expected arrival date and time for this stop.\n     * @Format Expressed according to ISO 8601.\n     */\n    expectedArrival: string;\n    /**\n     * The address of the chosen endDestination as defined in the transportMetadata.\n     */\n    order: FpOrder;\n}\n","import { StatisticsItem } from '../types';\n\nexport interface StatisticsGeometryResultItem {\n  value: number\n}\n\nexport interface StatisticsGeometryResultStatistic {\n  [index: string]: StatisticsGeometryResultItem\n}\n\nexport class StatisticsGeometryResult {\n  readonly raw: any\n  readonly values: {\n    min?: StatisticsGeometryResultStatistic\n    max?: StatisticsGeometryResultStatistic\n    avg?: StatisticsGeometryResultStatistic\n    sum?: StatisticsGeometryResultStatistic\n    count?: StatisticsGeometryResultStatistic\n    stddev?: StatisticsGeometryResultStatistic\n    variance?: StatisticsGeometryResultStatistic\n  } = {}\n\n  constructor(result: any[], statistics: StatisticsItem[]) {\n    const statsticsMap: {[index: number]: string} = {}\n    statistics.forEach(statistic => {\n      statsticsMap[statistic.id] = statistic.name\n    })\n\n    this.raw = result\n    const values: any = this.values\n\n    for (let key in result) {\n      const row: any = result[key]\n      const aggregationKey = (row.aggregation || '').toLowerCase()\n      values[aggregationKey] = values[aggregationKey] || {}\n\n      const statistic = statsticsMap[row.statisticId]\n      values[aggregationKey][statistic] = {value: row.value}\n    }\n  }\n}\n","// Barrel for types module. See https://angular.io/guide/glossary#barrel\nexport * from './types'\nexport * from './requestOptions'\nexport * from './options'\nexport * from './responses'\n\n","import { LatLngId, SRID} from '../../types';\nimport { TargomoClient } from '../targomoClient';\nimport { PolygonRequestOptions } from '../../types/options/polygonRequestOptions';\nimport {TravelRequestPayload} from './travelRequestPayload'\n\nexport interface PolygonSvgOptions extends PolygonRequestOptions {\n  serializer: 'json'\n}\n\nexport interface PolygonGeoJsonOptions extends PolygonRequestOptions {\n  serializer: 'geojson'\n}\n\nexport class PolygonPayloadOptions {\n  minPolygonHoleSize: number = 10000000\n  buffer: number = 50\n  simplify: number = 50\n  srid: SRID = SRID.SRID_4326\n\n  format?: string\n  quadrantSegments: number = 2\n\n  serializer: 'json' | 'geojson'\n  intersectionMode: 'average' | 'union' | 'intersection' | 'none' = 'union'\n  decimalPrecision: number = 6\n\n  values: number[]\n}\n\nexport class PolygonRequestPayload extends TravelRequestPayload {\n  polygon = new PolygonPayloadOptions()\n\n  constructor(client: TargomoClient, sources: LatLngId[], options: PolygonSvgOptions|PolygonGeoJsonOptions) {\n    super(<any>options)\n\n    this.sources = this.buildSourcesCfg(sources)\n    this.polygon.values = options.travelEdgeWeights\n    this.polygon.serializer = options.serializer\n    this.polygon.simplify = options.simplify\n    this.polygon.srid = options.srid\n    this.polygon.buffer = options.buffer\n    this.polygon.minPolygonHoleSize = options.minPolygonHoleSize\n    this.polygon.quadrantSegments = options.quadrantSegments\n    this.polygon.intersectionMode = options.intersectionMode\n    this.polygon.decimalPrecision = options.decimalPrecision\n  }\n}\n","\nimport * as geometry from '../geometry/projection'\nimport { PolygonData } from './responses/polygonSvgResult';\n\nexport interface ProjectedBoundsData {\n  southWest: ProjectedPointData\n  northEast: ProjectedPointData\n}\n\n/**\n *\n */\nexport class ProjectedBounds implements ProjectedBoundsData {\n  southWest: ProjectedPoint = new ProjectedPoint(Infinity, Infinity)\n  northEast: ProjectedPoint = new ProjectedPoint(-Infinity, -Infinity)\n\n  constructor(bounds?: {\n    southWest: {x: number, y: number}\n    northEast: {x: number, y: number}\n  }) {\n    if (bounds) {\n      this.southWest = new ProjectedPoint(bounds.southWest.x, bounds.southWest.y)\n      this.northEast = new ProjectedPoint(bounds.northEast.x, bounds.northEast.y)\n    }\n  }\n\n  expandPoint(x: number, y: number) {\n    this.southWest.x = Math.min(this.southWest.x, x)\n    this.northEast.x = Math.max(this.northEast.x, x)\n    this.southWest.y = Math.min(this.southWest.y, y)\n    this.northEast.y = Math.max(this.northEast.y, y)\n  }\n\n  expand(bounds: ProjectedBoundsData) {\n    this.expandPoint(bounds.northEast.x, bounds.northEast.y)\n    this.expandPoint(bounds.southWest.x, bounds.southWest.y)\n  }\n}\n\nexport interface ProjectedPointData {\n  x: number\n  y: number\n}\n\n/**\n *\n */\nexport class ProjectedPoint implements ProjectedPointData {\n  constructor(public x: number, public y: number) {}\n}\n\n/**\n *\n */\nexport class ProjectedLineString {\n  points: ProjectedPointData[]\n  bounds3857: ProjectedBounds = new ProjectedBounds()\n\n  constructor(coordinates: [number, number][]) {\n    this.points = coordinates.map(coordinate => {\n      this.bounds3857.expandPoint(coordinate[0], coordinate[1])\n      const pair = geometry.sphericalMercator.project({ lat: coordinate[0], lng: coordinate[1] })\n      return new ProjectedPoint(pair.x, pair.y)\n    })\n  }\n}\n\n/**\n *\n */\nexport class ProjectedPolygon {\n  travelTime: number\n  area: number\n  lineStrings: ProjectedLineString[]\n  bounds3857: ProjectedBounds = new ProjectedBounds()\n\n  constructor(data: PolygonData) {\n    this.travelTime = data.travelTime\n    this.area = data.area\n\n    this.lineStrings = [new ProjectedLineString(data.outerBoundary)]\n    this.bounds3857.expand(this.lineStrings[0].bounds3857)\n\n    if (data.innerBoundary) {\n      data.innerBoundary.forEach(innerBoundary => {\n        const lineString = new ProjectedLineString(innerBoundary)\n        this.lineStrings.push(lineString)\n        this.bounds3857.expand(lineString.bounds3857)\n      })\n    }\n  }\n}\n","import { TargomoClient } from './targomoClient'\nimport { LatLngId } from '../index';\nimport { PolygonRequestOptions } from '../types/options/polygonRequestOptions';\nimport { PolygonRequestPayload, PolygonGeoJsonOptions, PolygonSvgOptions } from './payload/polygonRequestPayload';\nimport { UrlUtil } from '../util/urlUtil';\nimport { requests} from '../util/requestUtil';\nimport { PolygonSvgResult, PolygonData } from '../types/responses/polygonSvgResult';\nimport { FeatureCollection, MultiPolygon } from 'geojson';\nimport { ProjectedPolygon, ProjectedBounds } from '../types/projectedPolygon';\nimport { webMercatorToLatLng, boundingBoxFromLocationArray } from '../geometry';\nimport { BoundingBox, LatLng } from '../types';\n\n\n/**\n * @Topic Polygons\n */\nexport class PolygonsClient {\n  constructor(private client: TargomoClient) {\n  }\n  /**\n   * Request geojson polygons for one or more sources from r360 service\n   * @param sources\n   * @param options\n   */\n  async fetch(sources: LatLngId[], options: PolygonGeoJsonOptions): Promise<FeatureCollection<MultiPolygon>>;\n\n\n  /**\n   * Request svg polygons for one or more sources from r360 service\n   * @param sources\n   * @param options\n   */\n  async fetch(sources: LatLngId[], options: PolygonSvgOptions): Promise<PolygonArray>;\n\n  async fetch(sources: LatLngId[], options: PolygonSvgOptions|PolygonGeoJsonOptions):\n    Promise<PolygonArray | FeatureCollection<MultiPolygon>> {\n      const cfg = new PolygonRequestPayload(this.client, sources, options)\n      const result = await this._executeFetch(sources, options, cfg);\n      if (options.serializer === 'json') {\n        // const boundedResults = (result as PolygonSvgResult[]).map((polygons: any) => new BoundedPolygonSvgResult(polygons))\n        const boundedPolys = PolygonArray.create(result, result.metadata);\n        return boundedPolys;\n      } else if (options.serializer === 'geojson') {\n        return result as FeatureCollection<MultiPolygon>;\n      }\n  }\n\n  private async _executeFetch(sources: LatLngId[], options: PolygonRequestOptions, cfg: PolygonRequestPayload): Promise<any> {\n\n    const url = new UrlUtil.TargomoUrl(this.client)\n      .part(this.client.serviceUrl)\n      .version()\n      .part('/polygon')\n      .key()\n      .toString();\n\n    const result = await requests(this.client, options).fetchCachedData(options.useClientCache, url, 'POST', cfg);\n    result.metadata = options\n    return result\n  }\n}\n\n/**\n * Class to extend Array for polygons result to add maxBounds method to array results\n */\nexport class PolygonArray extends Array<PolygonSvgResult> {\n  private constructor(items?: Array<PolygonSvgResult>) {\n    super(...items)\n  }\n  static create(items: Array<PolygonSvgResult>, metadata?: any): PolygonArray {\n    const newProto = Object.create(PolygonArray.prototype);\n    (items as PolygonSvgResult[]).forEach((polygons: any) => newProto.push(polygons))\n    if (metadata) {\n      newProto.metadata = metadata;\n    }\n    return newProto;\n  }\n\n  getMaxBounds(): BoundingBox {\n    let boundsPoints: LatLng[] = []\n    this.forEach((svgPolygons: PolygonSvgResult) => {\n      let bounds3857: ProjectedBounds;\n      svgPolygons.polygons.forEach((polygonData: PolygonData) => {\n        const polygon = new ProjectedPolygon(polygonData)\n        if (bounds3857) {\n          bounds3857.expand(polygon.bounds3857)\n        } else {\n          bounds3857 = polygon.bounds3857\n        }\n      })\n\n      boundsPoints.push(webMercatorToLatLng(bounds3857.northEast, null));\n      boundsPoints.push(webMercatorToLatLng(bounds3857.southWest, null));\n    });\n    return boundingBoxFromLocationArray(boundsPoints);\n  }\n}\n","import { LatLngId} from '../../types'\nimport { TargomoClient } from '../targomoClient'\nimport { TimeRequestOptions } from '../../types/options'\nimport {TravelRequestPayload} from './travelRequestPayload'\n\nexport class TimeRequestPayload extends TravelRequestPayload {\n\n  constructor(client: TargomoClient, sources: LatLngId[], targets: LatLngId[], options: TimeRequestOptions) {\n    super(options)\n    this.sources = this.buildSourcesCfg(sources)\n    this.targets = this.buildTargetsCfg(targets)\n  }\n}\n","import { TargomoClient } from './targomoClient'\nimport { LatLngId, LatLngIdTravelTime, LatLngIdTravelMode, TimeResult, ReachabilityResult } from '../index';\nimport { requests} from '../util/requestUtil';\nimport { TimeRequestOptions } from '../types/options/timeRequestOptions';\nimport { TimeRequestPayload } from './payload/timeRequestPayload';\nimport { UrlUtil } from '../util/urlUtil';\n\n// TODO: decide on method names...or keep previous names\n/**\n * @Topic Reachability\n */\nexport class ReachabilityClient {\n  constructor(private client: TargomoClient) {\n  }\n\n  /**\n   *\n   * @param sources\n   * @param targets\n   * @param options\n   */\n  async individual(sources: LatLngIdTravelMode[], targets: LatLngId[], options: TimeRequestOptions): Promise<TimeResult[]> {\n    const url = new UrlUtil.TargomoUrl(this.client)\n      .part(this.client.serviceUrl)\n      .version()\n      .part('/time')\n      .key()\n      .toString();\n\n    const cfg = new TimeRequestPayload(this.client, sources, targets, options)\n    return await requests(this.client, options).fetchCachedData(options.useClientCache, url, 'POST', cfg)\n  }\n\n\n  /**\n   * Makes a reachability request to the r360 services, and returns the raw results of the request\n   *\n   * @param sources\n   * @param targets\n   * @param options\n   */\n  async combined(sources: LatLngId[], targets: LatLngId[], options: TimeRequestOptions): Promise<ReachabilityResult[]> {\n    const url = new UrlUtil.TargomoUrl(this.client)\n      .part(this.client.serviceUrl)\n      .version()\n      .part('/reachability')\n      .key()\n      .toString();\n\n    const cfg = new TimeRequestPayload(this.client, sources, targets, options)\n    // TODO: add timeout\n    return await requests(this.client, options).fetchCachedData(options.useClientCache, url, 'POST', cfg)\n  }\n\n  /**\n   * Makes a reachability request to the r360 services and returns the number of locations that are reachable within the given parameters\n   *\n   * @param sources\n   * @param targets\n   * @param options\n   */\n  async count(sources: LatLngId[], targets: LatLngId[], options: TimeRequestOptions): Promise<number> {\n    // TODO: sopmething like this was used somewhere think\n    // (maybe autoprop)....however since it is trivial...maybe we should not have it anymore\n    return (await this.locations(sources, targets, options)).length\n  }\n\n  /**\n   * Makes a reachability requests to the r360 services and returns the input targets decorated with the resulting travel time\n   *\n   * @param sources\n   * @param targets\n   * @param options\n   */\n  async locations<T extends LatLngIdTravelTime>(sources: LatLngId[],\n                                                            targets: T[],\n                                                            options: TimeRequestOptions): Promise<T[]> {\n    const map: any = {}\n    targets.forEach(place => map[String(place.id)] = -1)\n\n    const response: any[] = await this.combined(sources, targets, options)\n    response.forEach(target => {\n      const id = String(target.id)\n      if (!map[id]) {\n        console.warn('NOT FOUND', String(target.id))\n      } else {\n        if (target.travelTime > -1) {\n          if (map[id] > -1) {\n            map[id] = Math.min(map[id], target.travelTime)\n          } else {\n            map[id] = target.travelTime\n          }\n        }\n      }\n    })\n\n    return (<T[]>targets).filter(place => {\n      const id = String(place.id)\n      place.travelTime = map[id]\n      return map[id] > -1\n    })\n  }\n\n}\n","import { LatLngId} from '../../types'\nimport { TargomoClient } from '../targomoClient'\nimport { RouteRequestOptions } from '../../types/options'\nimport { TravelRequestPayload } from './travelRequestPayload';\n\nexport interface RouteCompactOptions extends RouteRequestOptions {\n  pathSerializer: 'compact'\n}\n\nexport interface RouteGeoJsonOptions extends RouteRequestOptions {\n  pathSerializer: 'geojson'\n}\n\nexport class RouteRequestPayload extends TravelRequestPayload {\n\n  pathSerializer?: 'compact' | 'geojson'\n\n  constructor(client: TargomoClient, sources: LatLngId[], targets: LatLngId[], options: RouteCompactOptions|RouteGeoJsonOptions) {\n    super(options)\n    this.sources = this.buildSourcesCfg(sources)\n    this.targets = this.buildTargetsCfg(targets)\n    this.pathSerializer = options.pathSerializer;\n\n    if (typeof options.recommendations === 'boolean') {\n      options.recommendations = options.recommendations ? 1 : 0\n    }\n    if (Number.isInteger(options.recommendations) && this.sources) {\n      this.sources.forEach((source: any) => {\n        if (source.tm != null) {\n          for (let mode in source.tm) {\n            source.tm[mode].recommendations = options.recommendations\n          }\n        }\n      })\n    }\n  }\n}\n","import { TargomoClient } from './targomoClient'\nimport { LatLngIdTravelMode, LatLngId } from '../index';\nimport { RouteRequestOptions } from '../types/options/routeRequestOptions';\nimport { Route } from '../types/responses/route';\nimport { requests } from '../util/requestUtil';\nimport { UrlUtil } from '../util/urlUtil';\nimport { RouteRequestPayload, RouteGeoJsonOptions, RouteCompactOptions } from './payload/routeRequestPayload';\nimport { FeatureCollection, LineString, Point } from 'geojson';\n\n/**\n * @Topic Routes\n */\nexport class RoutesClient {\n  constructor(private client: TargomoClient) {\n  }\n\n  async fetch(sources: LatLngIdTravelMode[], targets: LatLngId[], options: RouteGeoJsonOptions):\n    Promise<FeatureCollection<LineString|Point>[]>;\n\n  async fetch(sources: LatLngIdTravelMode[], targets: LatLngId[], options: RouteCompactOptions):\n    Promise<Route[]>;\n\n  async fetch(sources: LatLngIdTravelMode[], targets: LatLngId[], options: RouteGeoJsonOptions|RouteCompactOptions):\n    Promise<Route[] | FeatureCollection<LineString|Point>[]> {\n\n    const cfg = new RouteRequestPayload(this.client, sources, targets, options)\n    const result = await this._executeFetch(sources, targets, options, cfg);\n\n    if (!options.pathSerializer || options.pathSerializer === 'compact') {\n      return result.routes.map((meta: any) => {\n        return new Route(this.client, meta.travelTime, meta.segments, meta)\n      })\n    } else if (options.pathSerializer === 'geojson') {\n      return result.routes;\n    }\n  }\n\n  private async _executeFetch(sources: LatLngIdTravelMode[], targets: LatLngId[], options: RouteRequestOptions, cfg: RouteRequestPayload):\n    Promise<{routes: any}> {\n\n    const url = new UrlUtil.TargomoUrl(this.client)\n      .part(this.client.serviceUrl)\n      .version()\n      .part('/route')\n      .key()\n      .toString();\n\n    const result = await requests(this.client, options).fetchCachedData(options.useClientCache, url, 'POST', cfg, {\n      // Headers are here because something needs to be fixed in the service endpoint\n      'Accept': 'application/json,application/javascript,*/*'\n    })\n\n    return result\n  }\n}\n\n","import { TargomoClient } from './targomoClient'\nimport { StatisticsGroupId, SimilarityCriteria, BoundingBox, UrlUtil } from '../index';\nimport { requests} from '../util/requestUtil';\n\n/**\n * @Topic Similarity\n */\nexport class SimilarityClient {\n  constructor(private client: TargomoClient) {\n  }\n\n\n  /**\n   *\n   */\n  async metadata(key: StatisticsGroupId): Promise<any[]> {\n\n    const url = new UrlUtil.TargomoUrl(this.client)\n      .host(this.client.config.tilesUrl)\n      .part('similarity/meta/')\n      .version()\n      .part('/' + encodeURIComponent('' + key))\n      .key()\n      .toString();\n\n    return await requests(this.client).fetch(url)\n  }\n\n  /**\n   *\n   */\n  async fetch(group: StatisticsGroupId,\n    cell: number,\n    conditions: SimilarityCriteria[],\n    bounds: BoundingBox,\n    normalizeOnViewport: boolean): Promise<any> {\n\n  // TODO: have a \"Payload\" object\n    const boundsData = {\n      'west': bounds.southWest.lng,\n      'south': bounds.southWest.lat,\n      'east': bounds.northEast.lng,\n      'north': bounds.northEast.lat\n    }\n\n    const data = {\n      bounds: boundsData,\n      refCellId: cell,\n      scores: conditions.map(item => ({\n        source: item.source,\n        minutes: item.minutes,\n        factor: item.factor || 1\n      }))\n    }\n\n    const urlObject = new UrlUtil.TargomoUrl(this.client)\n      .host(this.client.config.tilesUrl)\n      .part('similarity/scores_cumulative/')\n      .version()\n      .part('/' + encodeURIComponent('' + group))\n      .key();\n    const url = normalizeOnViewport ? urlObject.params({normalizeOnViewport: !!normalizeOnViewport}).toString() : urlObject.toString();\n\n    return await requests(this.client).fetch(url, 'POST', data)\n  }\n}\n","import { LatLngId, TravelType } from '../../types';\nimport { StatisticsRequestOptions, StatisticsTravelRequestOptions } from '../../types/options/statisticsRequestOptions'\nimport { TargomoClient } from '../targomoClient';\n\nfunction isStatisticsRequestOptions(value: StatisticsRequestOptions | StatisticsTravelRequestOptions): value is StatisticsRequestOptions {\n  return (<any>value).statistics\n}\n\nexport class StatisticsRequestPayload {\n  statisticIds: number[]\n  statisticGroupId: number\n  inactiveSources: { id: string, x: number, y: number }[] = []\n  getClosestSources: boolean = false\n  serviceKey: string\n  serviceUrl: string\n  useCache: boolean\n  iFeelLucky: boolean\n  omitIndividualStatistics: boolean\n  sources: { id: string, x: number, y: number }[]\n  travelType: TravelType\n  edgeWeight: 'time' | 'distance'\n  maxEdgeWeight: number\n  frame: number\n  time: number\n  date: number\n  maxTransfers: number\n  maxWalkingTimeFromSource: number\n  avoidTransitRouteTypes: number[]\n  rushHour: boolean\n\n  constructor(client: TargomoClient, sources: LatLngId[], options: StatisticsRequestOptions | StatisticsTravelRequestOptions) {\n\n    this.serviceUrl = client.serviceUrl;\n    this.serviceKey = client.serviceKey;\n    this.useCache = options.useCache == undefined ? true : options.useCache\n    this.sources = sources.map(source => ({id: source.id, y: source.lat, x: source.lng}))\n    this.iFeelLucky = options.iFeelLucky;\n    this.travelType = options.travelType;\n    this.edgeWeight = options.edgeWeight;\n    this.maxEdgeWeight = options.maxEdgeWeight;\n    this.frame = options.transitFrameDuration;\n    this.time = options.transitFrameTime;\n    this.date = options.transitFrameDate;\n    this.maxTransfers = options.transitMaxTransfers;\n    this.maxWalkingTimeFromSource = options.transitMaxWalkingTimeFromSource;\n    this.avoidTransitRouteTypes = options.transitAvoidTransitRouteTypes;\n    this.rushHour = options.rushHour;\n\n    if (options.inactiveSources) {\n      this.inactiveSources = options.inactiveSources.map(source => ({id: source.id, y: source.lat, x: source.lng}))\n    }\n\n    let statisticsIndices: number[] = []\n\n    if (isStatisticsRequestOptions(options)) {\n      this.omitIndividualStatistics = options.omitIndividualStatistics\n      statisticsIndices = options.statistics.map(statistic => {\n        if (statistic instanceof Number || typeof statistic === 'number') {\n          return +statistic\n        } else {\n          return statistic.id\n        }\n      })\n    }\n\n    this.statisticGroupId = +options.statisticsGroup\n    this.statisticIds = statisticsIndices\n\n    if (options.closestSources) {\n      this.getClosestSources = true\n    }\n\n  }\n}\n","import { StatisticsGeometryRequestOptions } from '../../types/options/statisticsRequestOptions'\nimport { TargomoClient } from '../targomoClient';\n\nexport class StatisticsGeometryRequestPayload {\n  statisticIds: number[]\n  statisticGroupId: number\n  intersectionGeometry: {data: string, crs: number}\n\n  constructor(client: TargomoClient, geometry: string, options: StatisticsGeometryRequestOptions) {\n\n    let statisticsIndices: number[] = options.statistics.map(statistic => {\n      if (statistic instanceof Number || typeof statistic === 'number') {\n        return +statistic\n      } else {\n        return statistic.id\n      }\n    })\n\n    this.statisticGroupId = +options.statisticsGroup\n    this.statisticIds = statisticsIndices\n\n    this.intersectionGeometry = {\n      data: geometry,\n      crs: options.crs || 4326\n    }\n  }\n}\n","import { TargomoClient } from './targomoClient'\nimport {\n  LatLngId,\n  StatisticsList,\n  ReachableTile,\n  StatisticsGroupMeta,\n  StatisticsGroupId,\n  StatisticsItem,\n  StatisticsItemMeta,\n  StatisticsRequestOptions,\n  StatisticsTravelRequestOptions,\n  StatisticsGeometryRequestOptions,\n  StatisticsGroupEnsemble,\n  UrlUtil\n} from '../index';\nimport { StatisticsRequestPayload } from './payload/statisticsRequestPayload';\nimport { StatisticsResult } from '../types/responses/index';\nimport { requests } from '../util/requestUtil';\nimport { SimpleLRU } from '../util/cache';\nimport { StatisticsGeometryRequestPayload } from './payload/statisticsGeometryRequestPayload';\nimport { StatisticsGeometryResult } from '../types/responses/statisticsGeometryResult';\n\n/**\n * @Topic Statistics\n */\nexport class StatisticsClient {\n  private statisticsMetadataCache = new SimpleLRU<StatisticsGroupMeta>(200)\n  private statisticsEnsemblesCache = new SimpleLRU<{[id: string]: StatisticsGroupEnsemble}>(200)\n\n  constructor(private client: TargomoClient) {\n  }\n\n  /**\n   *\n   * @param sources\n   * @param options\n   */\n  async combined(sources: LatLngId[], // sources: LatLng[],\n    options: StatisticsRequestOptions): Promise<StatisticsList> {\n    const result = await this.dependent(sources, options)\n    return result && result.statistics\n  }\n\n  /**\n  * Make a statistics request to the r360 services\n  */\n  async individual(sources: LatLngId[], // sources: LatLng[],\n    options: StatisticsRequestOptions): Promise<{ [id: string]: StatisticsList }> {\n    const result = await this.dependent(sources, options)\n    return result && result.individualStatistics\n  }\n\n\n  /**\n  * Make a statistics request to the r360 services\n  */\n  async travelTimes(sources: LatLngId[], options: StatisticsTravelRequestOptions): Promise<ReachableTile> {\n    if (!sources.length) {\n      return null\n    }\n\n    const url = new UrlUtil.TargomoUrl(this.client)\n      .host(this.client.config.statisticsUrl)\n      .part('traveltimes')\n      .params({\n        serviceUrl: this.client.serviceUrl\n      })\n      .toString();\n\n    return await requests(this.client, options).fetch(url, 'POST', new StatisticsRequestPayload(this.client, sources, options))\n  }\n\n  /**\n   *\n   * @param sources\n   * @param options\n   */\n  async dependent(sources: LatLngId[], // was LatLng[]\n    options: StatisticsRequestOptions): Promise<StatisticsResult> {\n\n    if (!sources.length) {\n      return null\n    }\n\n    const url = new UrlUtil.TargomoUrl(this.client)\n      .host(this.client.config.statisticsUrl)\n      .part('charts/dependent')\n      .params({\n        serviceUrl: this.client.serviceUrl\n      })\n      .toString();\n\n    const result = await requests(this.client, options)\n      .fetch(url, 'POST', new StatisticsRequestPayload(this.client, sources, options))\n    return new StatisticsResult(result, options.statistics)\n  }\n\n\n  /**\n   *\n   * @param sources\n   * @param options\n   */\n  async geometry(geometry: string, options: StatisticsGeometryRequestOptions): Promise<StatisticsGeometryResult> {\n    if (!geometry) {\n      return null\n    }\n\n    const url = new UrlUtil.TargomoUrl(this.client)\n      .host(this.client.config.statisticsUrl)\n      .part('values/geometry')\n      .params({\n        serviceUrl: this.client.serviceUrl\n      })\n      .toString();\n\n    const result = await requests(this.client, options)\n    .fetch(url, 'POST', new StatisticsGeometryRequestPayload(this.client, geometry, options))\n    return new StatisticsGeometryResult(result, options.statistics)\n  }\n\n  /**\n   *\n   * @param group\n   */\n  async metadata(group: StatisticsGroupMeta | StatisticsGroupId) {\n    const server = this.client.config.tilesUrl\n    const key = (typeof group == 'number') ? group : group.id\n    const cacheKey = server + '-' + key\n\n    return await this.statisticsMetadataCache.get(cacheKey, async () => {\n\n      const url = new UrlUtil.TargomoUrl(this.client)\n        .host(this.client.config.tilesUrl)\n        .part('statistics/meta/')\n        .version()\n        .part('/' + key + '')\n        .key()\n        .toString();\n\n      const result = await requests(this.client).fetch(url)\n      if (!result.name && result.names && result.names.en) {\n        result.name = result.names.en\n      }\n\n      if (result.stats && result.stats.length) {\n        result.stats.forEach((stat: any) => {\n          if (!stat.name && stat.names && stat.names.en) {\n            stat.name = stat.names.en\n          }\n        })\n      }\n\n      return result\n    })\n  }\n\n  /**\n   *\n   */\n  async metadataKey(group: StatisticsGroupMeta | StatisticsGroupId, statistic: StatisticsItem): Promise<StatisticsItemMeta> {\n    const endpoint = await this.metadata(group)\n\n    for (let attribute of endpoint.stats) {\n      if (statistic.id == attribute.statistic_id || (attribute.names && attribute.names.en == statistic.name)) {\n        return attribute\n      }\n    }\n\n    return null\n  }\n\n  /**\n   * Potentially decorate a layer route with excluded statistics.\n   */\n  tileRoute(group: StatisticsGroupMeta | StatisticsGroupId, include?: StatisticsItem[]) {\n    const key = (typeof group == 'number') ? group : group.id\n\n    const urlObject = new UrlUtil.TargomoUrl(this.client)\n      .host(this.client.config.tilesUrl)\n      .part('statistics/tiles/')\n      .version()\n      .part('/' + key + '/{z}/{x}/{y}.mvt')\n      .key();\n\n    return include && include.length > 0 ?\n      urlObject.params({columns: encodeURIComponent(include.map(row => +row.id).join(','))}).toString() :\n      urlObject.toString()\n\n  }\n\n  /**\n   *\n   * @param sources\n   * @param options\n   */\n  async ensembles(): Promise<{[id: string]: StatisticsGroupEnsemble}> {\n    const cacheKey = this.client.config.tilesUrl\n\n    return await this.statisticsEnsemblesCache.get(cacheKey, async () => {\n\n      const url = new UrlUtil.TargomoUrl(this.client)\n        .host(this.client.config.tilesUrl)\n        .part('ensemble/list/')\n        .version()\n        .key()\n        .toString();\n\n      const result = await requests(this.client).fetch(url, 'GET')\n\n      // FIXME: workaround for server results\n      for (let id in result) {\n        if (result[id]) {\n          const ensemble = result[id]\n          ensemble.id = +ensemble.id\n          if (ensemble.groups && ensemble.groups.length) {\n            ensemble.groups.forEach((group: any) => {\n              group.hierarchy = +group.hierarchy\n              group.id = +group.id\n            })\n          }\n        }\n      }\n\n      return result\n    })\n  }\n}\n","import { StatisticsRequestPayload } from './statisticsRequestPayload'\nimport {\n  LatLngId,\n  MultigraphRequestOptions,\n  MultigraphRequestAggregation,\n  MultigraphAggregationOptions,\n} from '../../types'\nimport { TargomoClient } from '../targomoClient'\n\nexport class StatefulMultigraphRequestPayload extends StatisticsRequestPayload {\n  multiGraphPreAggregationPipeline: {\n    [pipelineName: string]: MultigraphAggregationOptions\n  }\n\n  multiGraphReferencedStatisticIds: {\n    [parameterName: string]: number\n  }\n\n  multiGraphAggregationType: MultigraphRequestAggregation\n  multiGraphAggregationIgnoreOutliers: boolean\n  multiGraphAggregationOutlierPenalty: number\n  multiGraphAggregationMinSourcesRatio: number\n  multiGraphAggregationMinSourcesCount: number\n  multiGraphAggregationMaxResultValueRatio: number\n  multiGraphAggregationMaxResultValue: number\n  multiGraphAggregationFilterValuesForSourceOrigins: string[]\n  multiGraphAggregationMathExpression: string\n  multiGraphAggregationGravitationExponent: number\n  multiGraphAggregationPostAggregationFactor: number\n  multiGraphAggregationInputParameters: {\n    [parameterName: string]: {\n      inputFactor?: number\n      gravitationAttractionStrength?: number\n      gravitationPositiveInfluence?: number\n    }\n  }\n\n  multiGraphSerializationFormat: 'geojson' | 'json' | 'mvt'\n  multiGraphSerializationDecimalPrecision: number\n  multiGraphSerializationMaxGeometryCount: number\n\n  multiGraphDomainType: 'edge' | 'node' | 'statistic_geometry'\n  multiGraphDomainEdgeAggregationType: 'min' | 'max' | 'mean'\n  multiGraphDomainStatisticGroupId: number\n\n  multiGraphLayerType: 'identity' | 'tile' | 'hexagon' | 'custom_geometries'\n  multiGraphLayerGeometryDetailPerTile: number\n  multiGraphLayerMinGeometryDetailLevel: number\n  multiGraphLayerMaxGeometryDetailLevel: number\n  multiGraphLayerGeometryDetailLevel: number\n  multiGraphLayerCustomGeometryMergeAggregation: 'max' | 'mean' | 'min' | 'sum'\n\n  constructor(client: TargomoClient, sources: LatLngId[], options: MultigraphRequestOptions) {\n    super(client, sources, <any>options)\n\n    // This request only works if only recognized attributes are sent\n    delete this.inactiveSources\n    delete this.statisticGroupId\n    delete this.statisticIds\n    delete this.getClosestSources\n    delete this.useCache\n\n    if (options) {\n      if (options.multigraph.preAggregationPipeline) {\n        this.multiGraphPreAggregationPipeline = options.multigraph.preAggregationPipeline\n      }\n\n      if (options.multigraph.referencedStatisticIds) {\n        this.multiGraphReferencedStatisticIds = options.multigraph.referencedStatisticIds\n      }\n\n      if (options.multigraph.aggregation) {\n        this.multiGraphAggregationType = options.multigraph.aggregation.type || null\n        this.multiGraphAggregationIgnoreOutliers = options.multigraph.aggregation.ignoreOutliers || null\n        this.multiGraphAggregationOutlierPenalty = options.multigraph.aggregation.outlierPenalty || null\n        this.multiGraphAggregationMinSourcesRatio = options.multigraph.aggregation.minSourcesRatio || null\n        this.multiGraphAggregationMinSourcesCount = options.multigraph.aggregation.minSourcesCount || null\n        this.multiGraphAggregationMaxResultValueRatio = options.multigraph.aggregation.maxResultValueRatio || null\n        this.multiGraphAggregationMaxResultValue = options.multigraph.aggregation.maxResultValue || null\n        this.multiGraphAggregationFilterValuesForSourceOrigins =\n          options.multigraph.aggregation.filterValuesForSourceOrigins || null\n        this.multiGraphAggregationInputParameters = options.multigraph.aggregation.aggregationInputParameters || null\n        this.multiGraphAggregationMathExpression = options.multigraph.aggregation.mathExpression || null\n        this.multiGraphAggregationGravitationExponent = options.multigraph.aggregation.gravitationExponent || null\n        this.multiGraphAggregationPostAggregationFactor = options.multigraph.aggregation.postAggregationFactor || null\n      }\n\n      this.multiGraphSerializationFormat = options.multigraph.serialization.format\n      this.multiGraphSerializationDecimalPrecision = options.multigraph.serialization.decimalPrecision\n      this.multiGraphSerializationMaxGeometryCount = options.multigraph.serialization.maxGeometryCount\n\n      this.multiGraphDomainType = options.multigraph.domain.type\n      this.multiGraphDomainEdgeAggregationType = options.multigraph.domain.edgeAggregationType\n      this.multiGraphDomainStatisticGroupId = options.multigraph.domain.statisticGroupId\n\n      if (options.multigraph.layer) {\n        this.multiGraphLayerType = options.multigraph.layer.type\n        this.multiGraphLayerGeometryDetailPerTile = options.multigraph.layer.geometryDetailPerTile\n        this.multiGraphLayerMinGeometryDetailLevel = options.multigraph.layer.minGeometryDetailLevel\n        this.multiGraphLayerMaxGeometryDetailLevel = options.multigraph.layer.maxGeometryDetailLevel\n        this.multiGraphLayerGeometryDetailLevel = options.multigraph.layer.geometryDetailLevel\n        this.multiGraphLayerCustomGeometryMergeAggregation = options.multigraph.layer.customGeometryMergeAggregation\n      }\n    }\n  }\n}\n","import { TargomoClient } from './targomoClient'\nimport { LatLngId, MultigraphRequestOptions, MultigraphInfo, BoundingBox } from '../index'\nimport { UrlUtil } from '../util/urlUtil'\nimport { requests } from '../util/requestUtil'\nimport { StatefulMultigraphRequestPayload } from './payload/statefulMultigraphRequestPayload'\n\n/**\n * @Topic Stateful Multigraph\n */\nexport class StatefulMultigraphClient {\n  constructor(private client: TargomoClient) {}\n\n  /**\n   * Creates a new multigraph tile set for the given sources and parameters.\n   * Returns an id for the given aggregation to be used in subsequent mvt requests.\n   *\n   * @param sources\n   * @param options\n   */\n  async create(sources: LatLngId[], options: MultigraphRequestOptions): Promise<string> {\n    const url = new UrlUtil.TargomoUrl(this.client)\n      .host(this.client.config.statisticsUrl)\n      .part('multigraph')\n      .key()\n      .params({ serviceUrl: this.client.serviceUrl })\n      .toString()\n\n    const cfg = new StatefulMultigraphRequestPayload(this.client, sources, options)\n\n    const result = await requests(this.client, options).fetchCachedData(\n      options.useClientCache,\n      url,\n      'POST-RAW',\n      JSON.stringify(cfg),\n      { Accept: 'text/plain' }\n    )\n    return result\n  }\n\n  /**\n   * Runs a \"monolith\" multigraph request for the given sources and parameters.\n   * This performs the usual routing and then performs a global aggregation\n   * into a single value per layer.\n   *\n   * @param sources\n   * @param options\n   */\n  async monolith(sources: LatLngId[], options: MultigraphRequestOptions): Promise<string> {\n    const url = new UrlUtil.TargomoUrl(this.client)\n      .host(this.client.config.statisticsUrl)\n      .part('multigraph/monolith')\n      .key()\n      .params({ serviceUrl: this.client.serviceUrl })\n      .toString()\n\n    const cfg = new StatefulMultigraphRequestPayload(this.client, sources, options)\n\n    const result = await requests(this.client, options).fetchCachedData(options.useClientCache, url, 'POST', cfg, {\n      Accept: 'application/json',\n    })\n    return result\n  }\n\n  /**\n   * Returns Info about the current State of the multigraph calculation\n   *\n   * **Multigraph Lifecycle**\n   * 1. CREATED\n   * 2. ROUTING\n   * 3. MERGING\n   * 4. AGGREGATING\n   * 5. COMPLETED / FAILED\n   *\n   * @param multigraphId UUID of the multigraph\n   */\n  async info(multigraphId: string): Promise<MultigraphInfo> {\n    const url = new UrlUtil.TargomoUrl(this.client)\n      .host(this.client.config.statisticsUrl)\n      .part('multigraph/' + multigraphId)\n      .key()\n      .params({ serviceUrl: this.client.serviceUrl })\n      .toString()\n\n    const result = await requests(this.client).fetch(url, 'GET')\n    if (result.boundingBoxNorthEast && result.boundingBoxSouthWest) {\n      result.boundingBox = <BoundingBox>{\n        northEast: {\n          lat: result.boundingBoxNorthEast.y,\n          lng: result.boundingBoxNorthEast.x,\n        },\n        southWest: {\n          lat: result.boundingBoxSouthWest.y,\n          lng: result.boundingBoxSouthWest.x,\n        },\n      }\n      delete result.boundingBoxNorthEast\n      delete result.boundingBoxSouthWest\n    }\n    return result\n  }\n\n  /**\n   * Redo Multigraph with UUID `multigraphId`\n   *\n   * @param multigraphId\n   */\n  async redo(multigraphId: string): Promise<void> {\n    const url = new UrlUtil.TargomoUrl(this.client)\n      .host(this.client.config.statisticsUrl)\n      .part('multigraph/' + multigraphId + '/update')\n      .key()\n      .params({ serviceUrl: this.client.serviceUrl })\n      .toString()\n\n    const result = await requests(this.client).fetch(url, 'PATCH')\n    return result\n  }\n\n  getTiledMultigraphUrl(multigraphId: string, format: 'geojson' | 'json' | 'mvt'): string {\n    return new UrlUtil.TargomoUrl(this.client)\n      .host(this.client.config.statisticsUrl)\n      .part('multigraph/' + multigraphId + '/{z}/{x}/{y}.' + format)\n      .key()\n      .params({ serviceUrl: this.client.serviceUrl })\n      .toString()\n  }\n}\n","import { FpResult } from './../types/responses/FleetResult';\nimport { FpRequestOptions } from './../types/options/fleetRequestOptions';\nimport { FpTransport } from './../types/types';\nimport { TargomoClient } from './targomoClient'\nimport { requests } from '../util/requestUtil';\nimport { FpRequestPayload } from './payload/fleetsRequestPayload';\nimport { FpStore, FpOrder } from '../types';\nimport { UrlUtil } from '../util/urlUtil';\n\n\n/**\n * @Topic Fleetplanner\n * @General This is the entry point for the Fleetplanner service.\n * The Fleetplanner service enables the configurable calculation of\n * efficient routing for multi-vehicle, multi-destination delivery scenarios.\n *\n * This service solves the Vehicle Routing Problem(VRP) which is similar to the traveling salesman problem. The difference between the two\n * problems, is that the VRP concerns multiple vehicles; a fleet of vehicles.\n * The VRP is about finding the optimal combination of routes for all of the vehicles.\n *\n * The VRP can be extended with additional factors that make the problem more complex. For example, deadlines can\n * be introduced. Every location has a deadline. In an optimal scenario, all the deadlines should be met. However, it is\n * not always possible to meet all deadlines with the number of vehicles that are available. In that case, the goal of the\n * VRP is to either meet as many deadlines, or to optimize the total sum of expired deadline times.\n *\n * Another way the VRP can be extended is by introducing weight and volumes to the orders that need to be delivered and having\n * vehicles with a maximum load weight and volume capacity.\n *\n * More in-depth/detailed information about the Fleetplanner service can be found at https://docs.targomo.com/fleetplanner/\n*/\nexport class FleetsClient {\n  constructor(private client: TargomoClient) {\n  }\n\n  /**\n   * @General Start a new request to compute optimized routes with the provided information.\n   * @Performance Depending on the options, the execution time of this call can vary significantly.\n   * This function makes a http POST request to the Targomo REST service for the Fleetplanner.\n   * Every call to this function will be recorded based on your API key.\n   * All your usage statistics are accessible on https://account.targomo.com/statistics.\n   * @Exceptions This function can return the same exceptions as described on https://docs.targomo.com/fleetplanner/\n   * @Example\n   * ``` js\n   * const stores = [{ uuid: '1', address: { lat: 52.474257, lng: 13.378094 } }];\n   * const orders = [{ storeUuid: '1', address: { lat: 52.4, lng: 13.4 } },\n   *                 { storeUuid: '1', address: { lat: 52.6, lng: 13.6 } },\n   *                 { storeUuid: '1', address: { lat: 52.6, lng: 13.3 } }];\n   * const transports = [{ vehicle: { storeUuid: '1', maxVolume: 100, maxWeight: 100 } }];\n   * const options = { optimizationAlgorithm: 'CONSTRAINT_SATISFACTION', maxEdgeWeight: 3000, travelType: 'car' }\n   * targomoClient.fleets.fetch(stores, orders, transports, options).then(result => {\n   *     console.log(result.tours);\n   * });\n   * ```\n   *\n   * @Param stores\n   * The stores, or otherwise called 'depots' from which their respective vehicles start their routes.\n   * A store has a relation with zero or more orders, and zero or more vehicles.\n   * @Param orders\n   * The orders that need to be serviced by a vehicle from the store which is concerns this order.\n   * An order has a relation with one store.\n   * ##### Performance\n   * The amount of orders has a significant on the time it takes to optimize the routes.\n   * When using the default settings for optimizationTime and unimprovedWaitingTime in combination with more than 100 orders,\n   * you can expect the results to be less optimized.\n   * In this case, the algorithm doesn't have enough time to completely finish the optimization for this amount of orders.\n   * Raise the optimizationTime option when sending a request with a high amount of orders.\n   * @Param transports\n   * The transports (vehicles). Each of which are assigned to a certain store.\n   * @Param options\n   * ##### Performance\n   * Various different options within this options object can have a significant noticable impact on the request duration.\n   */\n  async fetch(stores: FpStore[], orders: FpOrder[], transports: FpTransport[], options: FpRequestOptions): Promise<FpResult> {\n\n    const url = new UrlUtil.TargomoUrl(this.client)\n      .host(this.client.config.fleetsUrl)\n      .version()\n      .part('/api/key-auth/optimizations')\n      .key()\n      .toString();\n\n    const cfg = this._createPayload(this.client, stores, orders, transports, options);\n\n    const result = await requests(this.client, options).fetch(url, 'POST', cfg);\n\n    return result;\n  }\n\n\n  private _createPayload(\n    client: TargomoClient,\n    stores: FpStore[],\n    orders: FpOrder[],\n    transports: FpTransport[],\n    options: FpRequestOptions) {\n    const payload: FpRequestPayload = {\n      optimizationTime: options.optimizationTime,\n      optimizationAlgorithm: options.optimizationAlgorithm,\n      optimizationMetadata: {\n        costMatrixSource: options.costMatrixSource,\n        geojsonCreation: options.geojsonCreation,\n        unimprovedWaitingTime: options.unimprovedWaitingTime,\n        filterOrdersWithMissedDeadline: options.filterOrdersWithMissedDeadline,\n        filterOrdersOutsideOfValidWorkingHours: options.filterOrdersOutsideOfValidWorkingHours,\n        prohibitFilteringOfOrdersWithDeadlinesEarlierEqualsThan: options.prohibitFilteringOfOrdersWithDeadlinesEarlierEqualsThan,\n        secondsToPenaltyRatioForDeadlineMissed: options.secondsToPenaltyRatioForDeadlineMissed,\n        secondsToPenaltyRatioForOutOfWorkingHours: options.secondsToPenaltyRatioForOutOfWorkingHours,\n        timeConstraintPenaltyToTravelCostRatio: options.timeConstraintPenaltyToTravelCostRatio,\n        longestTourPenaltyFactor: options.longestTourPenaltyFactor,\n        nonParallelOrdersByTags: options.nonParallelOrdersByTags,\n        travelOptions: {\n          travelType: options.travelType,\n          serviceKey: client.serviceKey,\n          serviceUrl: client.serviceUrl,\n          travelTimeFactors: options.travelTimeFactors,\n          fallbackServiceUrl: '',\n          edgeWeight: options.edgeWeight,\n          maxEdgeWeight: options.maxEdgeWeight,\n          elevation: options.elevation,\n          rushHour: options.rushHour\n        }\n      },\n      stores: stores,\n      transports: transports,\n      orders: orders\n    }\n    return payload;\n  }\n}\n","import { TargomoClient } from './targomoClient'\nimport { UrlUtil } from '../util';\n/**\n * @Topic Basemaps\n * @General This is the entry point for using the basemaps provided by Targomo.\n * @Alternative If you wish to use our basemaps with Leaflet. Please take a look at the targomo-js-extensions library.\n * We have a Leaflet extension for using our basemaps in that library.\n*/\nexport class BasemapsClient {\n\n    /**\n     * @General A lookup list of all the basemap names that we provide.\n     * Soon we will have a code example in which you can see what the different basemaps look like.\n     * @Alternative Use the basemapNames getter if you want to get a list of keys which you can use to get the GLStyleURL.\n    */\n    readonly basemapsLookup: { [name: string]: string } = {\n        'Bright': 'osm-bright-gl-style',\n        'Light': 'positron-gl-style',\n        'Light No-Labels': 'positron-nolabels-gl-style',\n        'Dark': 'dark-matter-gl-style',\n        'Dark No-Labels': 'dark-matter-nolabels-gl-style',\n        'Gray': 'gray-gl-style',\n        'Gray No-Labels': 'gray-nolabels-gl-style',\n        'Light blue': 'blueberry-gl-style',\n        'Dark blue': 'fiord-color-gl-style',\n        'Dark blue No-Labels': 'fiord-color-nolabels-gl-style',\n        'Basic': 'klokantech-basic-gl-style',\n        'Toner': 'toner-gl-style',\n    }\n\n\n    constructor(private client: TargomoClient) {\n    }\n\n    /**\n     * @Format Note that the basemap names start with a capital letter.\n     * @Return A list of basemap names which can be used to pass as a parameter in the getGLStyleURL method.\n    */\n    get basemapNames(): string[] {\n        return Object.keys(this.basemapsLookup)\n    }\n\n\n    /**\n     * @General Get a GL style URL which can be used in Mapbox.\n     * @Exceptions This method can throw the error \"valid style name required to access Targomo basemap\".\n     * This error is thrown when the passed basremapName does not exist in basemapsLookup.\n     * Make sure that you get the basemapName with the basemapNames accessor when this error is thrown.\n     * @Example\n     * ``` js\n     * const basemaps = targomoClient.basemaps;\n     * const basemapNames = basemaps.basemapNames;\n     * const name = basemapNames[0];\n     * const styleURL = basemaps.getStyleURL(name);\n     * yourMapboxMap.setStyle(styleUrl);\n     * ```\n     * @Return Url for mapbox-gl style.\n     * @Param basemapName\n     * A string of valid basemap name (which you can get from the basemapNames accessor)\n    */\n    getGLStyleURL(basemapName: string): string {\n        if (!basemapName || !this.basemapsLookup[basemapName]) {\n            throw new Error('valid style name required to access Targomo basemap');\n        }\n        return new UrlUtil.TargomoUrl(this.client)\n            .host(this.client.config.basemapsUrl)\n            .part(this.basemapsLookup[basemapName] + '.json')\n            .params({key: this.client.serviceKey})\n            .toString();\n    }\n}\n","import { requests } from '../util/requestUtil'\n\nimport { PointsOfInterestClient } from './pointsOfInterest'\nimport { StatisticsClient } from './statistics'\nimport { ReachabilityClient } from './reachability'\nimport { OptimizationsClient } from './optimizations'\nimport { GeocodeEsriClient } from './geocode'\nimport { GeocodePhotonClient } from './geocodePhoton'\nimport { PolygonsClient } from './polygons'\nimport { RoutesClient } from './routes'\nimport { SimilarityClient } from './similarity'\nimport { BenchmarksClient } from './benchmarks'\nimport { ClientConfig, ClientOptions } from './clientConfig'\nimport { StatefulMultigraphClient } from './statefulMultigraph';\nimport { FleetsClient } from './fleets';\nimport { MultigraphClient } from './multigraph';\nimport { BasemapsClient } from './basemaps';\nimport { UrlUtil } from '..';\n\n/**\n * @Topic Geocoding\n */\nexport class GeocodingClients {\n  constructor(\n    readonly esri: GeocodeEsriClient,\n    readonly photon: GeocodePhotonClient\n  ) { }\n}\n\nexport class TargomoClient {\n\n  readonly serviceUrl: string\n\n  readonly pois: PointsOfInterestClient\n  readonly statistics: StatisticsClient\n  readonly reachability: ReachabilityClient\n  readonly optimizations: OptimizationsClient\n  readonly geocoding: GeocodingClients\n\n  readonly polygons: PolygonsClient\n  readonly routes: RoutesClient\n  readonly similarity: SimilarityClient\n  readonly benchmarks: BenchmarksClient\n  readonly statefulMultigraph: StatefulMultigraphClient\n  readonly multigraph: MultigraphClient\n  readonly fleets: FleetsClient\n\n  readonly basemaps: BasemapsClient\n\n  readonly config: ClientConfig\n\n  /**\n   * Create a new Targomo client\n   * @param region Service region name or full service URL. See: https://developers.route360.net/availability/\n   * @param serviceKey Your targomo service key\n   * @param additionalOptions additional options, defaults will be used if not provided\n   */\n  constructor(region: string, public serviceKey: string, options?: ClientOptions) {\n\n    if (!region) {\n      throw new TypeError('Region parameter is missing');\n    }\n\n    this.config = new ClientConfig(options)\n\n    if (!region.includes('http') && !region.includes('localhost') && !region.includes('/')) {\n      this.serviceUrl = 'https://api.targomo.com/' + region + '/'\n    } else {\n      this.serviceUrl = region\n    }\n\n    this.pois = new PointsOfInterestClient(this)\n    this.statistics = new StatisticsClient(this)\n    this.reachability = new ReachabilityClient(this)\n    this.optimizations = new OptimizationsClient(this)\n\n    this.geocoding = new GeocodingClients(\n      new GeocodeEsriClient(),\n      new GeocodePhotonClient(this)\n    )\n\n    this.polygons = new PolygonsClient(this)\n    this.routes = new RoutesClient(this)\n    this.similarity = new SimilarityClient(this)\n    this.benchmarks = new BenchmarksClient(this)\n    this.statefulMultigraph = new StatefulMultigraphClient(this)\n    this.multigraph = new MultigraphClient(this)\n    this.basemaps = new BasemapsClient(this);\n    this.fleets = new FleetsClient(this);\n  }\n\n  /**\n   * Extracts the endpoint part from the serviceUrl (for example `germany`)\n   */\n  get endpoint() {\n    const items = this.serviceUrl.split('/').filter(item => !!item)\n    return items[items.length - 1]\n  }\n\n\n  /**\n   *\n   */\n  async metadata() {\n\n    const url = new UrlUtil.TargomoUrl(this)\n      .part(this.serviceUrl)\n      .version()\n      .part('/metadata/network')\n      .key()\n      .toString();\n\n    return await requests(this).fetch(url)\n  }\n}\n","// Barrel for API functions see https://angular.io/guide/glossary#barrel\nexport * from './clientConfig'\nexport * from './benchmarks'\nexport * from './geocode'\nexport * from './geocodePhoton'\nexport * from './multigraph'\nexport * from './optimizations'\nexport {PointsOfInterestClient} from './pointsOfInterest'\nexport * from './polygons'\nexport * from './reachability'\nexport * from './routes'\nexport * from './similarity'\nexport * from './statistics'\nexport * from './targomoClient'\nexport * from './fleets'\n","export * from './api'\nexport * from './types'\nexport * from './util'\n\nimport * as geometryModule from './geometry'\nexport const geometry = geometryModule // NOTE: this does not export types, however we have none in there for now\n"],"names":["this","UrlUtil","tslib_1.__extends","StatisticsGroups","SRID","MultigraphRequestAggregation","MultigraphRequestLayer","projection.sphericalMercator","geometry.webMercatorToLatLng","MultigraphStatus","geometry.sphericalMercator","geometry"],"mappings":"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"}