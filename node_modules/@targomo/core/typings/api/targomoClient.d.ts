import { PointsOfInterestClient } from './pointsOfInterest';
import { StatisticsClient } from './statistics';
import { ReachabilityClient } from './reachability';
import { OptimizationsClient } from './optimizations';
import { GeocodeEsriClient } from './geocode';
import { GeocodePhotonClient } from './geocodePhoton';
import { PolygonsClient } from './polygons';
import { RoutesClient } from './routes';
import { SimilarityClient } from './similarity';
import { BenchmarksClient } from './benchmarks';
import { ClientConfig, ClientOptions } from './clientConfig';
import { StatefulMultigraphClient } from './statefulMultigraph';
import { FleetsClient } from './fleets';
import { MultigraphClient } from './multigraph';
import { BasemapsClient } from './basemaps';
/**
 * @Topic Geocoding
 */
export declare class GeocodingClients {
    readonly esri: GeocodeEsriClient;
    readonly photon: GeocodePhotonClient;
    constructor(esri: GeocodeEsriClient, photon: GeocodePhotonClient);
}
export declare class TargomoClient {
    serviceKey: string;
    readonly serviceUrl: string;
    readonly pois: PointsOfInterestClient;
    readonly statistics: StatisticsClient;
    readonly reachability: ReachabilityClient;
    readonly optimizations: OptimizationsClient;
    readonly geocoding: GeocodingClients;
    readonly polygons: PolygonsClient;
    readonly routes: RoutesClient;
    readonly similarity: SimilarityClient;
    readonly benchmarks: BenchmarksClient;
    readonly statefulMultigraph: StatefulMultigraphClient;
    readonly multigraph: MultigraphClient;
    readonly fleets: FleetsClient;
    readonly basemaps: BasemapsClient;
    readonly config: ClientConfig;
    /**
     * Create a new Targomo client
     * @param region Service region name or full service URL. See: https://developers.route360.net/availability/
     * @param serviceKey Your targomo service key
     * @param additionalOptions additional options, defaults will be used if not provided
     */
    constructor(region: string, serviceKey: string, options?: ClientOptions);
    /**
     * Extracts the endpoint part from the serviceUrl (for example `germany`)
     */
    readonly endpoint: string;
    /**
     *
     */
    metadata(): Promise<any>;
}
