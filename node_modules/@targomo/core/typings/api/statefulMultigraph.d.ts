import { TargomoClient } from './targomoClient';
import { LatLngId, MultigraphRequestOptions, MultigraphInfo } from '../index';
/**
 * @Topic Stateful Multigraph
 */
export declare class StatefulMultigraphClient {
    private client;
    constructor(client: TargomoClient);
    /**
     * Creates a new multigraph tile set for the given sources and parameters.
     * Returns an id for the given aggregation to be used in subsequent mvt requests.
     *
     * @param sources
     * @param options
     */
    create(sources: LatLngId[], options: MultigraphRequestOptions): Promise<string>;
    /**
     * Runs a "monolith" multigraph request for the given sources and parameters.
     * This performs the usual routing and then performs a global aggregation
     * into a single value per layer.
     *
     * @param sources
     * @param options
     */
    monolith(sources: LatLngId[], options: MultigraphRequestOptions): Promise<string>;
    /**
     * Returns Info about the current State of the multigraph calculation
     *
     * **Multigraph Lifecycle**
     * 1. CREATED
     * 2. ROUTING
     * 3. MERGING
     * 4. AGGREGATING
     * 5. COMPLETED / FAILED
     *
     * @param multigraphId UUID of the multigraph
     */
    info(multigraphId: string): Promise<MultigraphInfo>;
    /**
     * Redo Multigraph with UUID `multigraphId`
     *
     * @param multigraphId
     */
    redo(multigraphId: string): Promise<void>;
    getTiledMultigraphUrl(multigraphId: string, format: 'geojson' | 'json' | 'mvt'): string;
}
