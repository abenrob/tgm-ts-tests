import { BoundingBox, LatLngId, LatLngIdProperties, LatLngProperties } from '../types';
import { POIRequestOptions } from '../types/options/poiRequestOptions';
import { TargomoClient } from './targomoClient';
/**
 * An object representing a point (poi/marker) which is returned from overpass queries in this module
 */
export declare class OSMLatLng implements LatLngProperties {
    readonly id: number;
    readonly lng: number;
    readonly lat: number;
    readonly properties: {
        [index: string]: any;
    };
    constructor(id: number, lng: number, lat: number, properties: {
        [index: string]: any;
    });
    toString(): any;
    copy(): OSMLatLng;
}
/**
 *
 */
/**
 * @Topic Points of Interest
 */
export declare class PointsOfInterestClient {
    private client;
    constructor(client: TargomoClient);
    /**
     * Query the overpass service with a raw overpass query string (in other words you supply the exact query)
     *
     * @param query
     */
    queryRaw(query: string): Promise<OSMLatLng[]>;
    /**
     * Query the overpass servive for given categories (way[type]=tag and node[way]=tag) within a given bounding box
     *
     * @param categories
     * @param boundingBox
     */
    query(categories: {
        type: string;
        tag: string;
    }[], boundingBox: BoundingBox[]): Promise<OSMLatLng[]>;
    /**
     * Make an overpass query to a given url (full url including the query parameters)
     *
     * The results will be parsed and returned as a list of OSMLatLng objects
     */
    queryGetCustom(url: string): Promise<OSMLatLng[]>;
    /**
     * Makes a request to the r360 poi service.
     * Returns a list of OSMLatLng locations of the categories specified by `osmTypes` that are reachable within the given travel options
     */
    reachable(source: LatLngId, /// LatLng
    options: POIRequestOptions): Promise<{
        [index: string]: LatLngIdProperties;
    }>;
}
